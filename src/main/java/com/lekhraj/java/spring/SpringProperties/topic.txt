-- SB --
application.property - default file
application-<profile/env>.properties
- Automatically registered.
- use:
    @value inject to java property
    @Autowired Environmnet env. env-API

-- More --
1. create and register in a property file
2. create and register in multiple property file
3. create env specific
4. property file outside jar
5 @propertySource,
6. Properties From Command Line Arguments
7. Properties From Environment Variables
8. Load property by Prefix.
   Hierarchical Properties
    - @ConfigurationProperties(prefix="")
            Also register them also put @Component, @Configuration, @ConfigurationPropertiesScan (Preferred)
    - propertyname must match
    - eg:
    mail.hostName
    mail.hostname
    mail.host_name
    mail.host-name
    mail.HOST_NAME all these works.
9. change location of property file.
    "src/main/resources" already added by SB in classpath for project resources lookup.

10. PropertySourcesPlaceholderConfigurer
11. @value - SpEL
12. Load bean By profile

13. more config
// c1 and c2 are annotated with @ConfigurationProperties.
- @ConfigurationPropertiesScan --> this annotation is particularly useful when you have multiple
classes annotated with @ConfigurationProperties and let us avoid explicitly registering them in your configuration.
- @EnableConfigurationProperties({c1.class, c2.class})
-


=====
https://chat.openai.com/c/d75560a0-1c06-4195-80fc-563ec8449bc5
https://www.baeldung.com/configuration-properties-in-spring-boot