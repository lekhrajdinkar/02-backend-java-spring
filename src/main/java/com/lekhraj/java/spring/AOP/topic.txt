In brief/short
# Aspect (Cross cutting concept) P J A
   - P point-cut ( expression to define jointpoint)
   - J join-point (points in the execution)
   - A Advice ( code )

===================

Aspects
-----------
- Spring AOP encapsulate Cross cutting concept :
    (logging, transaction management, security, metric, exception).
- An aspect is a modular unit of cross-cutting concern.
- applied across Spring beans, multiple classes, modules
  without modifying the original classes.
- defined using annotations.
- implemented using proxies. ?

1. join points
---------------
- Aspects are applied to the code at specified join-points
- points in the execution of the application.
- example:
    Method call: Join points where a method is called.
    Method execution: Join points where a method is invoked or executed.
    Constructor execution: Join points where a constructor is invoked or executed.
    Field access: Join points where a field is accessed (read or written).
    Exception handling: Join points where an exception is thrown or caught.
    Object initialization: Join points where an object is initialized.
    Static initialization: Join points where a class is initialized.

2. Pointcut
------------
- It defines the criteria for matching join points.
- Pointcuts use expressions to specify which methods or join points are affected.
- Expression
    - if annotation present
    - for all class inside in this package.
    - etc

- Types:
    2.1. Before:
    advice runs, before the join point and does not have the ability to
    prevent the execution of the join point's method.
    @Before("@annotation(org.springframework.security.access.annotation.Secured)")

    2.2. After:
    advice runs, after the join point, regardless of whether the join point
    completes normally or by throwing an exception.
    @After("execution(* com.example.service.*.*(..))")

        ** After returning:
        advice runs, after the join point completes normally.
        (without throwing an exception).
        @AfterReturning("execution(* com.example.service.*.*(..))")

        ** After throwing :
        advice runs, if the join point exits by throwing an exception.
        @AfterThrowing(pointcut = "execution(* com.example.service.*.*(..))", throwing = "ex")


    2.3. Around:
    advice surrounds the join point, allowing you to run custom code
    before and after the join point's execution.
    It has the most power and flexibility among the advice types.
    @Around("execution(* com.example.service.*.*(..))")

3. Advice
----------
- code that runs at a particular join point, specified by a pointcut.



