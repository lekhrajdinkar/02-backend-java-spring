1.  application.property - default file / Automatically registered.
    application-<profile/env>.properties

    use:
    @value inject to java property, @value - SpEL
    @Autowired Environmnet env. env-API

2. @propertySource / @propertySources - custom property file/s
    - create env specific custom prop file using active profile.
    - change location of property file, other than "src/main/resources".

3. Feed External property file / outside jar.

4. Feed External property
   - Properties From Command Line Arguments
   - Properties From Environment Variables

5.  concept [ property --> bind --> java-Object ]
    ** check auto binding example in code.

    @ConfigurationProperties(prefix="") on class c1, Load property by Prefix
        - Using @ConfigurationProperties on a @Bean Method.

    @EnableConfigurationProperties({c1.class, c2.class}) --> enable/register explicitly
        or @ConfigurationPropertiesScan Apply on class c1/c2.
        or @Component, @Configuration

    @ConfigurationPropertiesBinding, custom binding rule/code.
        - implement Converter<S,T> --> @override T convert(S)
        - https://www.baeldung.com/configuration-properties-in-spring-boot
        - check this: mail.credentials2=john2,password2 to ConfigurationPropertiesByPrefixBean
        - validation (JSR-380 format) while binding.


   Note: propertyname must match
    - eg:
    mail.hostName
    mail.hostname
    mail.host_name
    mail.host-name
    mail.HOST_NAME all these works.


6. PropertySourcesPlaceholderConfigurer


=====
https://chat.openai.com/c/d75560a0-1c06-4195-80fc-563ec8449bc5
https://www.baeldung.com/configuration-properties-in-spring-boot