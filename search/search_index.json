{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#my-tech-stack","title":"My Tech Stack","text":""},{"location":"#frontend-languages-framework-tools","title":"Frontend - Languages, framework, tools","text":""},{"location":"#backend-languages-framework-tools","title":"Backend - Languages, framework, tools","text":""},{"location":"#cloud-and-dev-ops","title":"Cloud and Dev Ops","text":""},{"location":"#learning","title":"\ud83c\udf31 Learning","text":"<ul> <li>Java : Notes | project</li> <li>Micro-service Architecture : Notes | project</li> <li>Messaging : rmq | kafka</li> <li>Spring / SpringBoot :  Notes | project</li> <li>AWS: Notes- SSA-03</li> <li>Docker / Docker Compose : Notes</li> <li>Kubenetes/ k8s : Notes | project<ul> <li>EKS | ECS</li> <li>HELM</li> </ul> </li> <li>Terraform : Notes | project</li> <li>CI/CD Pipeline : harness</li> <li>Scripting : BASH</li> </ul> <pre><code>mvn archetype:generate -DgroupId=com.example -DartifactId=new-module -Dpackage=com.example.newmodule -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n</code></pre>"},{"location":"00_Frontend/readme/","title":"Overview","text":"<p>Check here : https://github.com/lekhrajdinkar/01-front-end-pack/blob/master/readme.md</p>"},{"location":"00_Springboot/00_others/","title":"Others","text":""},{"location":"00_Springboot/00_others/#lombok","title":"lombok","text":"<ul> <li>https://chatgpt.com/c/67429341-6080-800d-a368-578db5ca75d2</li> </ul>"},{"location":"00_Springboot/00_others/#maven","title":"Maven","text":"<ul> <li>https://chatgpt.com/c/91ef161a-3b62-474b-8171-4575b49557e2</li> <li>https://chatgpt.com/c/05d997e3-b7b5-471a-ad1e-dc239c8c85db</li> <li>interview question : https://chatgpt.com/c/674288e0-5774-800d-aa67-e6a3e14051b2</li> <li>https://chat.deepseek.com/a/chat/s/1d48393c-791e-4d20-9c28-c934ff151b15 - BOM,POM. modules</li> </ul>"},{"location":"00_Springboot/00_others/#git","title":"git","text":"<ul> <li>merge vs rebase : https://chatgpt.com/c/325c3956-8c00-4d9f-8056-9350020cc1fc</li> <li>interview question : https://chatgpt.com/c/67428185-c2e4-800d-a691-97f034a12433</li> </ul>"},{"location":"00_Springboot/00_others/#model-mapper","title":"model mapper","text":"<ul> <li>kickoff : https://chatgpt.com/c/6742d97f-5798-800d-bf8e-f0f0939ae338</li> </ul>"},{"location":"00_Springboot/00_others/#map-struct","title":"map struct","text":"<ul> <li>kickOff : https://chatgpt.com/c/6742d8e6-6fcc-800d-a5e1-feda0b7bf067</li> </ul>"},{"location":"00_Springboot/01_Spring-core/01_Spring_Core/","title":"Spring - Core","text":""},{"location":"00_Springboot/01_Spring-core/01_Spring_Core/#references","title":"reference/s","text":"<ul> <li>bauleng:</li> <li>https://www.baeldung.com/spring-tutorial</li> <li>https://www.baeldung.com/spring-dependency-injection</li> <li>https://www.baeldung.com/spring-exceptions</li> <li>chatgpt </li> <li>question: https://chat.openai.com/c/33d0d06d-0aaa-4791-bce9-da8ea3f5dd53</li> <li>interview question (spring core): https://chatgpt.com/c/673d9844-6528-800d-92eb-fa5f45362570</li> </ul>"},{"location":"00_Springboot/01_Spring-core/01_Spring_Core/#a-dependency-injection","title":"A. Dependency Injection","text":""},{"location":"00_Springboot/01_Spring-core/01_Spring_Core/#key-concept","title":"key concept:","text":"<ul> <li><code>dependency</code></li> <li><code>IoC</code> : inversion of control of create object from Code to configuration(metadata) + resolve dependency</li> <li><code>DI</code> : pattern/design for IoC.</li> <li><code>Beans</code> : </li> <li><code>@Scope</code>(ConfigurableBeanFactory.SCOPE_SINGLETON)</li> <li>singleton (for stateless bean)</li> <li>prototype - hold state and are not thread-safe by default</li> </ul>"},{"location":"00_Springboot/01_Spring-core/01_Spring_Core/#developer-primary-2-tasks","title":"developer primary 2 tasks","text":"<p>don't use xml config at all. think of java config only.</p> <ul> <li>task-1: create/define beans in meta-config </li> <li>way-1: <code>@Configuration</code> &gt; <code>@Bean</code></li> <li> <p>way-2: <code>@Component</code> </p> <ul> <li>get created with default constructor, if parameterized not present.</li> <li>if parameterized present with arg-1 (Type:BeanX). then beanX object must be present.</li> <li><code>@Repository</code></li> <li><code>@Service</code> </li> <li><code>@Controller</code></li> <li>fact with generic class.</li> <li>@Component public class MyGenericBean&lt;PT,CT extends Item&gt; {} --&gt; this will NOT create a bean. </li> <li>@Component public class StringItemBean extends MyGenericBean&lt;String, Item&gt; {} --&gt; will create</li> <li>@Bean --&gt;  new MyGenericBean&lt;String, Item&gt; myGenericBean() --&gt; will create</li> </ul> </li> <li> <p>task-2: Inject Dependency</p> </li> <li> <p>manual</p> <ul> <li><code>@Configuration</code> + add this for additional bean lookup <code>@ComponentScan</code>(\"\")</li> <li><code>@Bean</code> m(){ return new object() ;}<ul> <li>name = {\"customBeanName1\", \"customBeanName2\"}</li> <li>initMethod = \"init\"</li> <li>destroyMethod = \"cleanup\"</li> <li>autowireCandidate = false/true</li> </ul> </li> <li><code>@Bean</code> m( bean1 b1 ){ bean2 o = new object(); o.setb1(b1) ; return o; }  -  setter injection (manual) <ul> <li>use-case: for mandatory dependency</li> </ul> </li> <li><code>@Bean</code> m( bean1 b1 ){ bean2 o = new object(b1);  return o; } -  contructor injection (manual) <ul> <li>use-case: for optional dependency</li> <li>override dependency, previously set by construction injection.</li> </ul> </li> </ul> </li> <li> <p>Autowire - <code>@Autowired (required=t/f)</code> </p> <ul> <li>https://www.baeldung.com/spring-autowire</li> <li>ResolvableType class for  superclass, interface, generic types.</li> <li>injection happens with reflection api</li> <li>used inside bean created with @component</li> <li>classes with a single constructor can omit the @Autowired annotation</li> <li>apply on :</li> <li><code>property</code> </li> <li><code>method</code> --&gt; get applied to <code>method arg</code>, then.</li> <li><code>constructor</code> --&gt; get applied to <code>constructor arg</code>, then.</li> </ul> </li> <li>Autowire more<ul> <li>issue while autowire:</li> <li><code>no-bean</code> found.</li> <li><code>multiple-bean</code> found (Conflict)  NoUniqueBeanDefinitionException. resolve:<ul> <li><code>@Qualifier</code>(BeanName)</li> <li><code>@primary</code></li> </ul> </li> <li><code>Circular dependencies</code>:<ul> <li>use @<code>order</code>(1) </li> <li>use @<code>DependsOn</code>(\"beanName\")</li> <li>refactor code</li> <li>avoid using constructor Injection </li> </ul> </li> <li>inject - map, list, set   <pre><code>  - create @Bean b1, b2, b3, of Bean1 type\n  - @Autowire list&lt;Bean1&gt; listofbean1 --&gt; inject/add b1,b2,b3 into listofbean1\n</code></pre></li> <li>@Resource(name = \"myCustomBean\") from J2EE. can also use in spring project.</li> </ul> </li> </ul>"},{"location":"00_Springboot/01_Spring-core/01_Spring_Core/#b-annotation","title":"B. Annotation","text":""},{"location":"00_Springboot/01_Spring-core/01_Spring_Core/#profile","title":"<code>@profile()</code>","text":"<ul> <li>bean will create for that profile</li> <li>Spring profile : local, dev,qa,prod</li> <li>app.prop --&gt; add this spring.profiles.active=local</li> <li>env var : SPRING_PROFILES_ACTIVE</li> </ul>"},{"location":"00_Springboot/01_Spring-core/01_Spring_Core/#lookup","title":"<code>@lookup</code>","text":"<ul> <li>handle scope mismatch.</li> <li>scenario-1 : inject SingleBean --&gt; prototype bean : ok</li> <li>scenario-2 : SingleBean &lt;-- inject prototype bean : one issue </li> <li>it will not create new instance of proto member.</li> <li>if we write custom code get new instance, spring won't manage it and could create memory leak, if not cleaned by manually.</li> <li>solution : use @Lookup</li> <li>it's recommended to avoid injecting prototype beans into singleton beans</li> <li>```     @Component     public class MySingletonBean {<pre><code> @Lookup\n public MyPrototypeBean getPrototypeBean() {\n       // This method body will be ignored\n        return null;\n }\n</code></pre> <p>} ```</p> </li> </ul>"},{"location":"00_Springboot/01_Spring-core/01_Spring_Core/#order","title":"<code>@Order</code>","text":"<ul> <li>in context of: </li> <li>collection :  insertion order.</li> <li>multiple Aspect - Apply order.</li> <li>load bean in container.</li> <li>Ordered.LOWEST_PRECEDENCE | HIGHEST_PRECEDENCE</li> </ul>"},{"location":"00_Springboot/01_Spring-core/01_Spring_Core/#dependson","title":"@DependsOn","text":""},{"location":"00_Springboot/01_Spring-core/01_Spring_Core/#component-dependsonbeana-beanc-public-class-beanb-bean-implementation","title":"<pre><code>@Component\n@DependsOn({\"beanA\", \"beanC\"})\npublic class BeanB {\n    // Bean implementation\n}\n</code></pre>","text":""},{"location":"00_Springboot/01_Spring-core/01_Spring_Core/#c-spring-ioc-container","title":"C. Spring IOC container","text":""},{"location":"00_Springboot/01_Spring-core/01_Spring_Core/#bean-life-cycle","title":"bean Life Cycle","text":"<ul> <li>also check : Spring_02_lifeCycle.md</li> <li>manage bean scopes</li> <li>singleton : create along with IoC container on start up.</li> <li> <p>prototype : create on demand</p> </li> <li> <p>stage-1 : create creation + injection</p> </li> <li>step-1 bean creation : by calling constructor + inject mandatory dependency</li> <li>step-2 bean dependency injection :  resolve conflict, if comes</li> <li>step-3 call aware</li> <li> <p>step-4 call Bean Post Processor</p> <ul> <li>@component class Hook_1 implements BeanPostProcessor {} - need to register it. </li> </ul> </li> <li> <p>BEAN READY  :green_circle:</p> </li> <li> <p>stage-2 : initialization</p> </li> <li>I:InitializingBean &gt; call afterPropertiesSet(){...}</li> <li> <p><code>@PostConstruct</code> m() {...}</p> </li> <li> <p>stage-3 : Destruction</p> </li> <li>I:DisposableBean &gt; call destroy(){...}</li> <li> <p><code>@PreDestory</code> m() {...}</p> </li> <li> <p>Step-4 : after container is up:</p> </li> <li>@Component CommandLineRunner/s &gt; run()</li> </ul>"},{"location":"00_Springboot/01_Spring-core/01_Spring_Core/#d-code-sample-programs","title":"D. Code / sample programs","text":""},{"location":"00_Springboot/01_Spring-core/01_Spring_Core/#1-scheduled-task","title":"1. scheduled task","text":"<ul> <li>@EnableScheduling @Configuration class Config1</li> <li>@Scheduled(cron = \"0 15 10 15 * ?\") m() {...}</li> <li>@Scheduled(fixedRate = 5000) m() {...}</li> <li>ScheduledConfig.java</li> </ul>"},{"location":"00_Springboot/01_Spring-core/01_Spring_Core/#2-custom-annotation","title":"2. Custom Annotation","text":"<ul> <li>get class/s</li> <li>get all method/s</li> <li>anno = method.getAnnotation(myAnno1.class)</li> <li>anno.attribute1(), ...</li> <li>run you logic around it. <pre><code>public void CustomAnnotationTest(){\n        Method method = Runner1.class.getMethod(\"testMethod1\");\n        MyAnnotation annotation = method.getAnnotation(MyAnnotation.class);\n\n        if (annotation != null) {\n            System.out.println(\"Value: \" + annotation.value());\n            System.out.println(\"Count: \" + annotation.count());\n        }\n    }\n</code></pre></li> </ul>"},{"location":"00_Springboot/01_Spring-core/02_Spring_bean_lifeCycle/","title":"Spring Bean Lifecycle","text":""},{"location":"00_Springboot/01_Spring-core/02_Spring_bean_lifeCycle/#lifecycle","title":"lifecycle","text":"<ul> <li>The lifecycle of a Spring bean consists of several stages, from instantiation to destruction.</li> <li>performing initialization</li> <li>performing cleanup tasks.</li> <li>fact: don't use aware, better way is to inject.   <pre><code>@Autowired    private BeanFactory beanFactory;\n@Autowired    private ApplicationContext applicationContext;\n</code></pre></li> </ul>"},{"location":"00_Springboot/01_Spring-core/02_Spring_bean_lifeCycle/#stages-beans-lifecycle","title":"<code>stages</code> : bean's lifecycle","text":"<p>1.<code>Instantiation And populate Properties</code>: - The bean is created using its constructor or a factory method. - Dependencies and properties are set on the bean, either through setters or fields.</p> <ol> <li><code>Aware Interfaces</code>:</li> <li>If the bean implements Aware interface</li> <li>BeanNameAware,</li> <li>BeanClassLoaderAware,</li> <li> <p>BeanFactoryAware, or ApplicationContextAware,etc</p> <ul> <li>Note: can also @autowired them directly.</li> </ul> </li> <li> <p><code>BeanPostProcessors</code>:</p> </li> <li><code>hooks</code> for customizing the bean lifecycle,</li> <li>If there are any BeanPostProcessor implementations <code>registered</code> in the context, they are applied.</li> <li>These can modify the bean instance before and after initialization, which is next step.</li> </ol> <p>bean is Constructed</p> <ol> <li><code>Initialization</code>:</li> <li>If the bean implements <code>InitializingBean</code>, Spring calls its <code>afterPropertiesSet()</code> method.</li> <li><code>@PostConstruct</code> annotated method is called.</li> </ol> <p>Ready for Use </p> <ol> <li><code>Destruction</code>:</li> <li> <p>If the bean implements DisposableBean, Spring calls its \"destroy()\" method,  when the bean is no longer needed. -@PreDestroy annotated method, it is called.</p> </li> <li> <p><code>Destroy</code>:</p> </li> <li>The bean is destroyed and its resources are released.</li> </ol>"},{"location":"00_Springboot/01_Spring-core/02_Spring_bean_lifeCycle/#more-notes","title":"More Notes:","text":"<ul> <li>It's important to note that not all beans go through every stage of the lifecycle.</li> <li>For example, beans that are singleton-scoped only go through the lifecycle once,</li> <li>while prototype-scoped beans go through the lifecycle each time they are requested from the container.</li> </ul>"},{"location":"00_Springboot/01_Spring-core/03_AOP_concept/","title":"AOP Concept","text":""},{"location":"00_Springboot/01_Spring-core/03_AOP_concept/#-httpschatgptcomc2616aaed-2668-4b78-85c8-f5c81f5ed6a0","title":"- https://chatgpt.com/c/2616aaed-2668-4b78-85c8-f5c81f5ed6a0","text":""},{"location":"00_Springboot/01_Spring-core/03_AOP_concept/#apo","title":"APO","text":"<ul> <li><code>Aspect</code> - aspect is a modular unit of cross-cutting concern, <code>eg : metrics</code></li> <li><code>join-point</code> - points in the execution at code. <code>eg : method execution</code></li> <li><code>point-cut</code> - expression/criteria to define joint-point <code>eg: annotated method</code></li> <li> <p><code>Advice</code> - code</p> </li> <li> <p>J P A</p> </li> <li>s3 bucket publish example </li> <li><code>Aspect</code> : publish report into s3 bucket.</li> <li><code>pointcut</code> - @After(\"expression to find report method\")publish_s3() { // logic is <code>advise</code> } </li> <li>at end of method execution is <code>jointpoint</code></li> </ul>"},{"location":"00_Springboot/01_Spring-core/03_AOP_concept/#aspects","title":"Aspects","text":"<ul> <li>Spring AOP encapsulate Cross cutting concept, like</li> <li>logging </li> <li>transaction management</li> <li>security </li> <li><code>metric</code> </li> <li>exception</li> <li> <p>could be anything, <code>publish s3</code>, etc</p> </li> <li> <p>applied across Spring beans, multiple classes, methods, etc without modifying the original classes.</p> </li> <li>defined using annotations.</li> <li>implemented using proxies.</li> </ul>"},{"location":"00_Springboot/01_Spring-core/03_AOP_concept/#join-points","title":"Join points","text":"<ul> <li>Aspects are applied to the code at specified join-points</li> <li>points in the execution of the application.</li> <li>example:<ul> <li><code>Method call</code>: Join points where a method is called.</li> <li><code>Method execution</code>: Join points where a method is invoked or executed.</li> <li><code>Constructor execution</code>: Join points where a constructor is invoked or executed.</li> <li><code>Field access</code>: Join points where a field is accessed (read or written).</li> <li><code>Exception handling</code>: Join points where an exception is thrown or caught.</li> <li><code>Object initialization</code>: Join points where an object is initialized.</li> <li><code>Static initialization</code>: Join points where a class is initialized.</li> </ul> </li> </ul>"},{"location":"00_Springboot/01_Spring-core/03_AOP_concept/#pointcut","title":"Pointcut","text":"<ul> <li>It defines the criteria/expression for matching join points.</li> <li>notice expression below</li> <li>Types: before, after(irrespective, normally, exception), around(before+after)</li> <li> <p>2.1. Before:</p> <ul> <li>advice runs before the join point,</li> <li>and does not have the ability to prevent the execution of the join point's method.</li> <li><code>@Before(\"@annotation(org.springframework.security.access.annotation.Secured)\")</code> </li> </ul> </li> <li> <p>2.2. After:</p> <ul> <li>advice runs after the join point, </li> <li>regardless of whether the join point  completes normally or by throwing an exception.</li> <li><code>@After(\"execution(* com.example.service.*.*(..))\")</code></li> </ul> </li> <li> <p>2.3. After returning:</p> <ul> <li>advice runs, after the join point completes normally.</li> <li>without throwing an exception</li> <li><code>@AfterReturning(\"execution(* com.example.service.*.*(..))\")</code></li> </ul> </li> <li> <p>2.4. After throwing :</p> <ul> <li>advice runs, if the join point exits by throwing an exception.</li> <li><code>@AfterThrowing(pointcut = \"execution(* com.example.service.*.*(..))\", throwing = \"ex\")</code></li> </ul> </li> <li> <p>2.3. Around:</p> <ul> <li>advice surrounds the join point, allowing you to run custom code</li> <li>before and after the join point's execution.</li> <li><code>@Around(\"execution(* com.example.service.*.*(..))\")</code></li> </ul> </li> </ul>"},{"location":"00_Springboot/01_Spring-core/03_AOP_concept/#advice","title":"Advice","text":"<ul> <li>code being runs at a particular join point.</li> </ul> <ul> <li>multiple aspects defined for same join point, then can run then in order by using <code>@order</code> <pre><code>@Aspect\n@Order(1)\npublic class LoggingAspect {\n    // Aspect implementation\n}\n\n@Aspect\n@Order(2)\npublic class ValidationAspect {\n    // Aspect implementation\n}\n</code></pre></li> </ul>"},{"location":"00_Springboot/01_Spring-core/04_spring_properties/","title":"Spring Properties","text":"<ul> <li>https://chat.openai.com/c/d75560a0-1c06-4195-80fc-563ec8449bc5</li> <li>https://www.baeldung.com/configuration-properties-in-spring-boot</li> </ul>"},{"location":"00_Springboot/01_Spring-core/04_spring_properties/#application-properties","title":"Application properties","text":""},{"location":"00_Springboot/01_Spring-core/04_spring_properties/#1-register","title":"1. Register","text":""},{"location":"00_Springboot/01_Spring-core/04_spring_properties/#automatically-registered-files","title":"Automatically registered files:","text":"<ul> <li>application.property - default file</li> <li>application-.properties"},{"location":"00_Springboot/01_Spring-core/04_spring_properties/#register-custom-properties-file","title":"Register custom properties-file","text":"<ul> <li>use <code>@propertySource / @propertySources</code></li> <li>keep here - src/main/resources : sb has utility method to read from resource folder.</li> <li>check : ReadConfigFromGlobalProperty.javaReadConfigFromGlobalProperty.java</li> <li>can have env/profile specific files too, as shoen below. <pre><code>@Configuration  \n@PropertySources(value = {\n        @PropertySource(value = \"classpath:global-database-${spring.profiles.active}.properties\"),\n        @PropertySource(value = \"classpath:global-rabbit-mq-${spring.profiles.active}.properties\")\n})\n</code></pre></li> <li>external property files <pre><code>1. JVM ARG :: java -jar my-app.jar --spring.config.location=&lt;path&gt;/application.properties\n2. env var :: export SPRING_CONFIG_LOCATION=/config/external/application.properties\n3. Command Line Arguments  :: ?\n</code></pre></li> </ul>"},{"location":"00_Springboot/01_Spring-core/04_spring_properties/#2-binding-into-custome-class","title":"2. Binding into custome class","text":"<ul> <li>check : ConfigurationPropertiesByPrefixBean.java</li> <li>property --&gt; sb does binding bts --&gt; into Object (of ConfigurationPropertiesByPrefixBean class)</li> <li>@ConfigurationProperties <pre><code>@ConfigurationProperties(prefix = \"mail\")\n@ConfigurationPropertiesScan // register bean\npublic class ConfigurationPropertiesByPrefixBean\n{\n    ...\n}\n</code></pre> <pre><code>// Using @ConfigurationProperties on a @Bean Method\n// pending...\n</code></pre></li> <li>more ways to register above class as bean - ConfigurationPropertiesByPrefixBean</li> <li>EnableConfigurationProperties({c1.class, c2.class}) --&gt; enable/register explicitly, may be in Application.java file</li> <li>add @ConfigurationPropertiesScan Apply on class c1/c2 (done above)</li> <li>add @Component</li> <li>add @Configuration</li> </ul>"},{"location":"00_Springboot/01_Spring-core/04_spring_properties/#in-built-binding","title":"in-built binding","text":"<ul> <li>property name must match - b/w prop and java class fields. <pre><code>all these works\n- mail.hostName\n- mail.hostname\n- mail.host_name\n- mail.host-name\n- mail.HOST_NAME\n</code></pre> <pre><code># prefix = mail\n\n# ------ String  --------\nmail.hostname =    mailer@mail.com\n\n# ------ number  --------\nmail.port     =    9000\n\n# ------ List / set --------\nmail.defaultRecipients[0]=admin@mail.com\nmail.defaultRecipients[1]=owner@mail.com\n\n# ------- Object  -------\nmail.credentials1.username=john\nmail.credentials1.password=password\nmail.credentials1.authMethod=SHA1\n\n# ------- Map&lt;String,String&gt;  ---------\nmail.additionalHeaders.redelivery=true\nmail.additionalHeaders.secure=true\n\n# ------- Map&lt;String,Object&gt;  ---------\nmail.map1.credentials1.username=mani\nmail.map1.credentials1.password=password1\nmail.map1.credentials2.username=lek\nmail.map1.credentials2.password=password12\n\nmap :\ncredentials1=object:{mani,password1}\ncredentials2=object:{lek,password2}\n\n# ------- Map&lt;String,list&lt;Object&gt;&gt;  ---------\n\n# ----- Duration,DataSize ------\n</code></pre></li> <li>check this for more Map binding example:</li> <li>Prop2Map.java</li> </ul>"},{"location":"00_Springboot/01_Spring-core/04_spring_properties/#custom-binding","title":"custom binding","text":"<ul> <li>create converter class:</li> <li>1 annotate with @ConfigurationPropertiesBinding</li> <li>2 implement Converter --&gt; @override TargetType convert(SourceType)<ul> <li>Prop2Map.javaCustomConverter_1.java</li> <li>string to Credential binding</li> <li><code>mail.credentials2 = john2,password2</code></li> </ul> <li>3 add validation (JSR-380 format), if needed     <pre><code>@NotBlank\n@length(min,max)\n@Max(1025)\n@Min(1025)\n@Pattern(regexp = \"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,6}$\")\n</code></pre></li>"},{"location":"00_Springboot/01_Spring-core/04_spring_properties/#3-read-properties","title":"3. Read properties","text":"<ul> <li><code>@Autowired Environmnet</code> env.</li> <li><code>@value</code> </li> <li>hardcode static value</li> <li>SpEL</li> </ul>"},{"location":"00_Springboot/01_springboot/01_SB_kickoff/","title":"SpringBoot","text":""},{"location":"00_Springboot/01_springboot/01_SB_kickoff/#references","title":"Reference/s","text":"<ul> <li>https://www.baeldung.com/spring-boot</li> <li>https://www.baeldung.com/spring-boot-annotations</li> <li>https://www.baeldung.com/spring-boot-starters</li> <li>https://www.baeldung.com/spring-exceptions</li> </ul>"},{"location":"00_Springboot/01_springboot/01_SB_kickoff/#topics","title":"Topics","text":""},{"location":"00_Springboot/01_springboot/01_SB_kickoff/#core-spring-concepts","title":"Core Spring Concepts:","text":"<ul> <li>Dependency Injection (DI),</li> <li>Aspect-Oriented Programming (AOP)</li> <li>Inversion of Control (IoC).</li> </ul>"},{"location":"00_Springboot/01_springboot/01_SB_kickoff/#spring-boot-basics","title":"Spring Boot Basics:","text":"<ul> <li>Spring Boot CLI</li> <li>admin setup : https://chatgpt.com/c/478413ee-1707-408e-b3f3-d13ee00e7471</li> <li>Spring Boot Starter project</li> <li>Spring MVC</li> <li>RESTful Web Services</li> <li>Spring Data JPA</li> <li>Spring Security</li> <li>Auto-Configuration</li> <li>customize Auto-Configuration</li> <li>create own custom starter project<ul> <li>02_SB_AutoConfig.md</li> <li>customize : we write our custom auto-configurations, we want Spring to use them conditionally.</li> <li>create your own class with @Configuration - new bean + Override Method. eg:WebSecurity, Datasource,etc</li> <li>Apply then conditionally - @ConditionalOnProperty, etc.</li> <li>properties.</li> </ul> </li> <li>more:      </li> <li>Overview of SB.</li> <li>bootstrap simple webApp</li> <li>Spring vs SB</li> <li><code>@SpringBootApplication</code> --&gt; @EnableAutoConfiguration, @Configuration, @ComponentScan</li> <li>worked on --&gt; web, jpa, test, okta, rmq, ibmmq, doc, okta, etc.</li> <li><code>@WebFilter</code></li> <li><code>banner.txt</code> keep in resources folder</li> </ul>"},{"location":"00_Springboot/01_springboot/01_SB_kickoff/#later-topics","title":"later topics","text":"<ul> <li>Spring Boot Actuator: https://chatgpt.com/c/7094d3bf-5952-4b93-bd73-a8abf39ebda1</li> <li>Testing in Spring Boot:</li> <li>Microservices with Spring Boot</li> <li>Spring Cloud</li> </ul>"},{"location":"00_Springboot/01_springboot/02_SB_AutoConfig/","title":"Auto Configuration","text":"<ul> <li>https://chatgpt.com/c/795ed757-ef25-48fc-a1c5-6755aab9bb03</li> <li>https://www.baeldung.com/spring-boot-annotations</li> </ul>"},{"location":"00_Springboot/01_springboot/02_SB_AutoConfig/#auto-config","title":"Auto-Config","text":"<ul> <li>Starter project &gt; <code>spring.factories</code> = listOfConfigClasses (which can be applied conditionally)</li> <li>SpringApplication.run() &gt; create AC, Loads:</li> <li>Standard beans</li> <li>Conditional-1(Is webApp)--&gt; beans-1</li> <li> <p>Conditional-2 : beans-2</p> </li> <li> <p>Notice this pattern </p> </li> <li>@Configuration Class-1 implements interface-1 &gt;&gt; Override method --&gt; gives new bean. </li> <li>this is sb config customization way.</li> <li><code>public class MyWebConfig implements WebApplicationInitializer {        onStartup(ServletContext servletContext) {          ...        }     }</code></li> <li>note: WebApplicationInitializer, provides spring way to configure ServletContext</li> </ul>"},{"location":"00_Springboot/01_springboot/02_SB_AutoConfig/#conditions","title":"Conditions","text":"<ol> <li>@ConditionalOnClass and @ConditionalOnMissingClass</li> <li>@ConditionalOnBean and @ConditionalOnMissingBean</li> <li>@ConditionalOnProperty</li> <li>@ConditionalOnResource</li> <li>@ConditionalOnWebApplication and @ConditionalOnNotWebApplication</li> <li>@ConditionalExpression</li> <li> <p><code>@Conditional</code> : Custom condition</p> </li> <li> <p>Apply these on</p> </li> <li>@Configuration class</li> <li>@Bean method</li> </ol>"},{"location":"00_Springboot/01_springboot/02_SB_AutoConfig/#custom-starter-project","title":"Custom starter project","text":"<ol> <li>create new Spring project, call it your starter.</li> <li>Create Auto-configuration/s:</li> <li>@Configuration Class-1 --&gt; with Bean with conditions ,to enable/disable,</li> <li>@Configuration Class-2 --&gt; with Bean with conditions ,to enable/disable, ...</li> <li> <p>@Configuration Class-N --&gt; with Bean with conditions ,to enable/disable</p> </li> <li> <p>Register Auto-Configuration Classes</p> </li> <li> <p>resource/META-INF/spring.factories=Class-1, Class-2, ... Class-N</p> </li> <li> <p>DONE</p> </li> <li> <p>Now package it and use it other project : </p> <p><code>mvn clean package/install</code> --&gt; local Maven repo.</p> </li> <li> <p>If want to exclude to Class-1:</p> </li> <li>@SpringBootApplication(exclude={Class-1})</li> </ol>"},{"location":"00_Springboot/01_springboot/03_SB_starter_test/","title":"Starter & Testing","text":"<p>--- Testing --- https://www.baeldung.com/spring-boot-data-sql-and-schema-sql 1. @sql, @sqlConfig - a declarative way to initialize and populate our test schema.</p>"},{"location":"00_Springboot/02_web/00%20WEB_start/","title":"Web Start","text":""},{"location":"00_Springboot/02_web/00%20WEB_start/#boiler-plate-code-remove-lombok-mapstruct-modelmapper","title":"&gt; boiler plate code remove : lombok, mapstruct, modelMapper","text":"<ul> <li>https://chatgpt.com/c/7d23b0fe-a7a5-43d5-9ced-69d4a344e31a - error handling</li> <li>https://chatgpt.com/c/f4a0c9cd-c6cb-414e-888c-605c2d50340c - ext server deploy</li> </ul>"},{"location":"00_Springboot/02_web/00%20WEB_start/#web","title":"web","text":""},{"location":"00_Springboot/02_web/00%20WEB_start/#0-web-request","title":"0 web request","text":"<ul> <li>idempotent : PUT</li> <li>non-idempotent</li> </ul>"},{"location":"00_Springboot/02_web/00%20WEB_start/#1-websocket-connection-intro","title":"1 WebSocket connection - intro","text":"<ul> <li>persistent(stateful), bi-directional communication channel between a client and a server over a single, long-lived TCP connection. </li> <li>WebSocket connections remain open and allow for real-time data exchange between the client and the serve.</li> <li></li> </ul>"},{"location":"00_Springboot/02_web/00%20WEB_start/#2-web-aware-spring-applicationcontext-webapplicationcontext","title":"2 web-aware Spring ApplicationContext : <code>WebApplicationContext</code>","text":"<ul> <li>IAC container for springMVC application.</li> <li>AC aware of the web-specific features and contexts in a Servlet environment.<ul> <li>can access the <code>ServletContext</code>, provides access to the Servlet API</li> <li>access the <code>ServletConfig</code></li> </ul> </li> <li>supports web-scopes for beans<ul> <li>request - bean is created for each HTTP request</li> <li>session -</li> <li>global session - never used</li> <li>Web socket - bean is created for each WebSocket connection</li> </ul> </li> </ul>"},{"location":"00_Springboot/02_web/00%20WEB_start/#3-cors","title":"3 CORS","text":"<ul> <li>https://chatgpt.com/c/79fe00c5-9852-4956-b0ec-be9a6657359c</li> </ul>"},{"location":"00_Springboot/02_web/00%20WEB_start/#4-security-threats","title":"4 security threats","text":"<ul> <li>XSS and CSRF </li> <li>https://chatgpt.com/c/c86b5fd1-c1b8-4a6b-bb8b-bbd832a606aa</li> <li>https://chatgpt.com/c/734bd77f-75d3-4be2-acbc-d80ef8b61b21</li> <li>https://chatgpt.com/c/e1547ff9-6ce4-4645-8fae-56d1924daa47</li> </ul>"},{"location":"00_Springboot/02_web/00%20WEB_start/#5-mime-type","title":"5 MIME type","text":"<ul> <li>consumes <pre><code>\"application/json\"                    Accepts JSON input\n\"application/xml\"                     Accepts XML input\n\"text/plain\"                          Accepts plain text\n\"multipart/form-data\"                 Accepts file uploads\n\"application/x-www-form-urlencoded\"   Accepts form data\n</code></pre></li> <li>produces <pre><code>\"application/json\"  Returns JSON\n\"application/xml\"   Returns XML\n\"text/html\"         Returns HTML\n\"text/csv\"          Returns CSV\n\"application/pdf\"   Returns PDF\n\n\nAPPLICATION_OCTET_STREAM - Generic binary (default)\nAPPLICATION_PDF - For PDF files\nIMAGE_JPEG/IMAGE_PNG - For images\nAPPLICATION_ZIP - For ZIP archives\n\nContent-Disposition Header\n- attachment forces download dialog\n- filename suggests the saved filename\n</code></pre></li> </ul>"},{"location":"00_Springboot/02_web/00_general_web_task/","title":"Things developer does for REST API:","text":""},{"location":"00_Springboot/02_web/00_general_web_task/#1-customizing-rest-endpoints-and-controllers","title":"1. Customizing REST Endpoints and Controllers","text":"<ul> <li>Endpoint Design: Follow RESTful principles, ensuring that URIs represent resources and use appropriate HTTP methods (GET, POST, PUT, DELETE, etc.).</li> <li>Controller Annotations: Use @RestController to define RESTful controllers and @RequestMapping or more specific annotations like @GetMapping, @PostMapping, etc., to map HTTP requests to handler methods.</li> <li>Path Variables and Request Parameters: Use @PathVariable and @RequestParam to capture and process data from the URI and query parameters.</li> <li>Request Body: Use @RequestBody to bind the HTTP request body to a Java object for POST and PUT requests.</li> <li>Response Entity: Return ResponseEntity to have full control over the HTTP response, including status codes and headers.</li> </ul>"},{"location":"00_Springboot/02_web/00_general_web_task/#2-content-negotiation","title":"2. Content Negotiation","text":"<ul> <li>Multiple Representations: Support different representations (JSON, XML) by configuring content negotiation.</li> <li>Media Types: Use produces and consumes attributes in request mapping annotations to specify supported media types.</li> </ul>"},{"location":"00_Springboot/02_web/00_general_web_task/#3-request-validation-and-formatting","title":"3. Request Validation and Formatting","text":"<ul> <li>Custom Validators: Create custom validation annotations and logic for request parameters and bodies.</li> <li>Date and Time Formatting: Customize date and time formats in request and response bodies.</li> <li>Validator library:     <code>&lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;   &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;   &lt;artifactId&gt;validation-api&lt;/artifactId&gt;</code></li> </ul>"},{"location":"00_Springboot/02_web/00_general_web_task/#4-custom-exception-handling-and-error-responses","title":"4. Custom Exception Handling and Error Responses","text":"<ul> <li>Global Exception Handling: Use @ControllerAdvice along with @ExceptionHandler to handle exceptions globally and provide consistent error responses.</li> <li>Custom Error Response Structure: Define a custom error response structure to return meaningful error messages and codes.</li> <li>Validation Errors: Use @Valid to trigger validation and handle validation errors gracefully.</li> </ul>"},{"location":"00_Springboot/02_web/00_general_web_task/#5-request-and-response-logging","title":"5. Request and Response Logging","text":"<ul> <li>Logging Interceptors: Implement interceptors to log incoming requests and outgoing responses for debugging and monitoring purposes.</li> <li>Log Filters: Use filters to log request and response details conditionally, based on configurations.</li> </ul>"},{"location":"00_Springboot/02_web/00_general_web_task/#6-security","title":"6. Security","text":"<ul> <li>CORS Configuration: Configure CORS to allow or restrict cross-origin requests based on security policies.</li> <li>Authentication and Authorization: Implement security mechanisms using Spring Security, including JWT (JSON Web Token) for stateless authentication.</li> <li>CSRF Protection: Ensure protection against Cross-Site Request Forgery (CSRF) attacks.</li> <li>Role-Based Access Control (RBAC): Define roles and restrict access to endpoints based on roles.</li> </ul>"},{"location":"00_Springboot/02_web/00_general_web_task/#7-rate-limiting-and-throttling","title":"7. Rate Limiting and Throttling","text":"<ul> <li>Rate Limiting Filters: Implement rate limiting to protect the API from abuse and ensure fair usage.</li> <li>Throttling Policies: Define and apply throttling policies to control the rate of requests from clients.</li> </ul>"},{"location":"00_Springboot/02_web/00_general_web_task/#8-api-documentation","title":"8. API Documentation","text":"<ul> <li>Swagger/OpenAPI Integration: Use Swagger or Springdoc OpenAPI to generate interactive API documentation.</li> <li>Annotations: Use Swagger annotations (@Api, @ApiOperation, etc.) to provide metadata for API documentation.</li> <li></li> </ul>"},{"location":"00_Springboot/02_web/00_general_web_task/#9-api-versioning","title":"9. API Versioning","text":"<ul> <li>URI Versioning: Include version numbers in the URI (e.g., /api/v1/resource).</li> <li>Header Versioning: Use custom headers to specify API versions.</li> <li>Content Negotiation Versioning: Use the Accept header to specify version (e.g., application/vnd.example.v1+json).</li> </ul>"},{"location":"00_Springboot/02_web/00_general_web_task/#10-pagination-and-sorting","title":"10. Pagination and Sorting","text":"<ul> <li>Spring Data JPA: Utilize Spring Data JPA's built-in pagination and sorting capabilities.</li> <li> </li> </ul>"},{"location":"00_Springboot/02_web/00_general_web_task/#custom-pagination-implement-custom-pagination-logic-if-required","title":"Custom Pagination: Implement custom pagination logic if required.","text":""},{"location":"00_Springboot/02_web/00_general_web_task/#11-hateoas-hypermedia-as-the-engine-of-application-state","title":"11. HATEOAS (Hypermedia as the Engine of Application State)","text":"<ul> <li>Implementing HATEOAS: Use Spring HATEOAS to add hypermedia links to the API responses, enabling clients to navigate the API dynamically.</li> <li>Resource Assemblers: Use ResourceAssembler classes to encapsulate the logic of creating resource representations with links.</li> </ul>"},{"location":"00_Springboot/02_web/00_general_web_task/#12-asynchronous-processing","title":"12. Asynchronous Processing","text":"<ul> <li>Async Controllers: Use @Async and CompletableFuture to handle long-running requests asynchronously.</li> <li>Deferred Results: Use DeferredResult or WebAsyncTask to return responses asynchronously.</li> </ul>"},{"location":"00_Springboot/02_web/00_general_web_task/#13-testing","title":"13. Testing","text":"<ul> <li>Unit Tests: Write unit tests for controllers using MockMVC.</li> <li>Integration Tests: Implement integration tests to verify the entire API flow.</li> <li>API Contract Testing: Use tools like Postman or Pact to ensure API contracts are met.</li> <li></li> </ul>"},{"location":"00_Springboot/02_web/00_general_web_task/#14-handling-file-uploads-and-downloads","title":"14. Handling File Uploads and Downloads","text":"<ul> <li>MultipartFile: Use MultipartFile to handle file uploads.</li> <li>Streaming Responses: Stream large files to clients to manage memory efficiently.</li> <li>By customizing these aspects, you can create a robust, secure, and scalable REST API tailored to your specific needs.</li> </ul>"},{"location":"00_Springboot/02_web/01_servlet_3/","title":"Servlet 3","text":""},{"location":"00_Springboot/02_web/01_servlet_3/#-httpschatgptcomcd7dba5ab-7f7a-4c1c-a443-f67f15ca09a2-green_circle","title":"- https://chatgpt.com/c/d7dba5ab-7f7a-4c1c-a443-f67f15ca09a2 :green_circle:","text":""},{"location":"00_Springboot/02_web/01_servlet_3/#servlet-3","title":"Servlet 3","text":""},{"location":"00_Springboot/02_web/01_servlet_3/#new-features","title":"new feature/s","text":"<ul> <li>programmatically register servlets,filter and lister into it ServletContext / SC , using <code>WebApplicationInitializer</code></li> <li> <p>eliminating need of web.xml</p> </li> <li> <p><code>public class MyWebAppInitializer implements WebApplicationInitializer {     @Override     public void onStartup(ServletContext servletContext) throws ServletException {         ServletRegistration.Dynamic servlet = servletContext.addServlet(\"exampleServlet\", new ExampleServlet());         servlet.addMapping(\"/example\");     }     }</code></p> </li> <li>Anno based - <code>@WebServlet</code>, <code>@WebFilter</code>, <code>@WebListener</code></li> <li>allows asynchronous request processing <pre><code>@WebServlet(urlPatterns = \"/asyncServlet\", asyncSupported = true)\npublic class AsyncServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        AsyncContext asyncContext = request.startAsync();\n        asyncContext.start(() -&gt; {\n            try {\n                // Simulate long-running task\n                Thread.sleep(5000);\n                response.getWriter().write(\"Async Response\");\n                asyncContext.complete();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        });\n    }\n}\n</code></pre></li> <li>programmatically configure security settings, but will use sb-security-starter.</li> <li>Enhanced file upload capabilities with the <code>@MultipartConfig</code> </li> </ul>"},{"location":"00_Springboot/02_web/01_servlet_3/#weblistener","title":"@webListener","text":"<ul> <li>used to perform actions in response to various events in a web application</li> <li>event eg : creation and destruction of the sessions and request objects</li> <li>based  on event already parent listener present, just create subclass out of it<ul> <li>HttpSessionListener</li> <li>ServletRequestListener</li> <li>... <pre><code>@WebListener\npublic class MyServletRequestListener implements ServletRequestListener {\n\n    @Override\n    public void requestInitialized(ServletRequestEvent sre) {\n        System.out.println(\"Request initialized\");\n        // Perform tasks such as logging request details, initializing request-specific data, etc.\n    }\n\n    @Override\n    public void requestDestroyed(ServletRequestEvent sre) {\n        System.out.println(\"Request destroyed\");\n        // Perform tasks such as cleaning up request-specific data, logging request end, etc.\n    }\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"00_Springboot/02_web/01_servlet_3/#servlet-context-sc","title":"Servlet Context / SC","text":"<ul> <li>like spring IAC - AC or hibernate - PC, we have web container - SC</li> <li>sample code: <pre><code>  - InputStream inputStream = servletContext.getResourceAsStream(\"/WEB-INF/resource.txt\");\n\n  - String paramValue = servletContext.getInitParameter(\"paramName\");\n\n  - servletContext.setAttribute(\"attributeName\", attributeValue);\n    Object attributeValue = servletContext.getAttribute(\"attributeName\");\n    servletContext.removeAttribute(\"attributeName\");\n\n  - servletContext.addServlet(\"dynamicServlet\", new MyServlet()); \n</code></pre></li> </ul>"},{"location":"00_Springboot/02_web/01_servlet_3/#webfilter","title":"@WebFilter","text":"<ul> <li>Components that can perform filtering tasks on request and response objects</li> <li>before and after the request is processed by a servlet.</li> <li>logging, </li> <li>authentication, </li> <li>input validation, </li> <li>transformation of response content. - intercept <pre><code>@WebFilter(\n    urlPatterns = \"/*\",\n    initParams = {\n        @WebInitParam(name = \"paramName\", value = \"paramValue\")\n    }\n)\npublic class ConfigurableFilter implements Filter {\n\n    private String paramValue;\n\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        paramValue = filterConfig.getInitParameter(\"paramName\");\n    }\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n            throws IOException, ServletException {\n        // Use the initialization parameter in the filter logic\n        System.out.println(\"Initialization Parameter: \" + paramValue);\n\n        // Pass the request and response to the next filter or servlet in the chain\n        chain.doFilter(request, response);\n    }\n\n    @Override\n    public void destroy() {\n        // Cleanup code, if needed\n    }\n}\n</code></pre></li> </ul>"},{"location":"00_Springboot/02_web/02_spring_MVC/","title":"spring MVC","text":""},{"location":"00_Springboot/02_web/02_spring_MVC/#overview-green_circle","title":"overview :green_circle:","text":"<ul> <li>flow with - handler mapping, view resolver, view renderer, interceptor/inbuilt-filter</li> <li>https://chatgpt.com/c/efc733ec-0a20-4be2-88da-df50535517b3 - basic flow overflow.</li> </ul>"},{"location":"00_Springboot/02_web/02_spring_MVC/#bean-webmvcconfigurer","title":"@Bean <code>WebMvcConfigurer</code>","text":"<ul> <li>create anonymous class out of it and override below method:</li> <li>public void addCorsMappings(CorsRegistry registry) {...</li> <li>public void addResourceHandlers(ResourceHandlerRegistry registry) { ...</li> <li>public void configureViewResolvers(ViewResolverRegistry registry)</li> <li>public void addInterceptors(InterceptorRegistry registry) {</li> <li>public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) {</li> <li>... <pre><code>@Configuration\npublic class WebMvcConfig {\n\n    @Bean\n    public WebMvcConfigurer webMvcConfigurer() {\n        return new WebMvcConfigurer() {\n\n            // Configure Cross-Origin Resource Sharing (CORS)\n            @Override\n            public void addCorsMappings(CorsRegistry registry) {\n                registry.addMapping(\"/**\")\n                        .allowedOrigins(\"http://localhost:3000\") // Adjust allowed origins\n                        .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\")\n                        .allowedHeaders(\"*\")\n                        .allowCredentials(true);\n            }\n\n            // Configure resource handlers for serving static files\n            @Override\n            public void addResourceHandlers(ResourceHandlerRegistry registry) {\n                registry.addResourceHandler(\"/static/**\")\n                        .addResourceLocations(\"classpath:/static/\")\n                        .setCachePeriod(3600); // 1 hour caching\n            }\n\n            // Configure view resolvers\n            @Override\n            public void configureViewResolvers(ViewResolverRegistry registry) {\n                registry.viewResolver(new InternalResourceViewResolver(\"/WEB-INF/views/\", \".jsp\"));\n            }\n\n            // Configure interceptors\n            @Override\n            public void addInterceptors(InterceptorRegistry registry) {\n                registry.addInterceptor(new CustomInterceptor())\n                        .addPathPatterns(\"/**\")\n                        .excludePathPatterns(\"/login\", \"/error\");\n            }\n\n            // Configure content negotiation (e.g., JSON/XML response format)\n            @Override\n            public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\n                configurer.favorParameter(true)\n                        .parameterName(\"format\")\n                        .defaultContentType(org.springframework.http.MediaType.APPLICATION_JSON)\n                        .mediaType(\"json\", org.springframework.http.MediaType.APPLICATION_JSON)\n                        .mediaType(\"xml\", org.springframework.http.MediaType.APPLICATION_XML);\n            }\n\n            // Configure message converters for HTTP request/response\n            @Override\n            public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) {\n                // Add custom converters if needed\n            }\n\n            // Configure path match options\n            @Override\n            public void configurePathMatch(PathMatchConfigurer configurer) {\n                configurer.setUseTrailingSlashMatch(false);\n            }\n        };\n    }\n\n    // Locale resolver for internationalization\n    @Bean\n    public LocaleResolver localeResolver() {\n        AcceptHeaderLocaleResolver resolver = new AcceptHeaderLocaleResolver();\n        resolver.setDefaultLocale(Locale.US);\n        return resolver;\n    }\n}\n</code></pre></li> </ul>"},{"location":"00_Springboot/02_web/03_spring_boot_stater_web/","title":"Spring Boot Starter Web","text":""},{"location":"00_Springboot/02_web/03_spring_boot_stater_web/#-httpschatgptcomc831f36a0-bce4-4372-87d4-9ab6528babc5","title":"- https://chatgpt.com/c/831f36a0-bce4-4372-87d4-9ab6528babc5","text":""},{"location":"00_Springboot/02_web/03_spring_boot_stater_web/#sb-starter-web","title":"sb-starter-web","text":""},{"location":"00_Springboot/02_web/03_spring_boot_stater_web/#a-features","title":"A. features","text":"<ul> <li>necessary dependencies (jackson, springMVC), </li> <li>embedded server</li> <li>default exception</li> <li>Actuator</li> </ul>"},{"location":"00_Springboot/02_web/03_spring_boot_stater_web/#b-useful-customization-class","title":"B. useful customization class","text":""},{"location":"00_Springboot/02_web/03_spring_boot_stater_web/#1-class-webserverfactorycustomizer","title":"1. class: WebServerFactoryCustomizer","text":"<ul> <li>interface provided by Spring Boot </li> <li>allows you to customize the configuration of embedded web servers</li> <li>setting ports, </li> <li>enabling SSL, </li> <li>configuring timeouts</li> </ul> <pre><code>@Component\npublic class MyTomcatCustomizer implements WebServerFactoryCustomizer&lt;TomcatServletWebServerFactory&gt; {\n\n    @Override\n    public void customize(TomcatServletWebServerFactory factory) \n    {\n        factory.setPort(8081);  \n        factory.setContextPath(\"/myapp\");  \n\n        // Additional customization can be done here\n        factory.addConnectorCustomizers(connector -&gt; {\n\n        });\n\n        // SSl\n        Ssl ssl = new Ssl();\n            ssl.setKeyStore(\"classpath:keystore.jks\");\n            ssl.setKeyStorePassword(\"password\");\n            ssl.setKeyPassword(\"password\");\n        factory.setSsl(ssl);\n    }\n}\n</code></pre>"},{"location":"00_Springboot/02_web/03_spring_boot_stater_web/#2-class-servletregistrationbean","title":"2. class: ServletRegistrationBean","text":"<ul> <li>Register a New Servlet (spring boot way)</li> <li>similarly have @Bean <code>FilterRegistrationBean&lt;MyFilter&gt;</code></li> </ul> <pre><code>@Configuration\npublic class ServletConfig \n{\n    @Bean\n    public ServletRegistrationBean&lt;CustomServlet&gt; customServletRegistrationBean() \n    {\n        ServletRegistrationBean&lt;CustomServlet&gt; registrationBean = new ServletRegistrationBean&lt;&gt;(new CustomServlet(), \"/custom\");\n        registrationBean.setLoadOnStartup(1);\n        return registrationBean;\n    }\n}\n</code></pre>"},{"location":"00_Springboot/02_web/03_spring_boot_stater_web/#3-class-springbootservletinitializer","title":"3. Class: SpringBootServletInitializer","text":"<ul> <li>used when you want to deploy a Spring Boot application to an external servlet container</li> <li>check below for more.</li> </ul>"},{"location":"00_Springboot/02_web/03_spring_boot_stater_web/#c-typical-things","title":"C. Typical things:","text":""},{"location":"00_Springboot/02_web/03_spring_boot_stater_web/#1-update-embedded-server","title":"1. update embedded server","text":"<ul> <li>update pom </li> <li>add spring-boot-starter-undertow / spring-boot-starter-jetty</li> <li>exclude &lt;spring-boot-starter-tomcat from <code>spring-boot-starter-web</code></li> </ul>"},{"location":"00_Springboot/02_web/03_spring_boot_stater_web/#2-shut-down-project","title":"2. shut down project","text":"<ul> <li>ApplicationContext context = SpringApplication.run(DemoApplication.class, args);</li> <li>context.close();</li> </ul>"},{"location":"00_Springboot/02_web/03_spring_boot_stater_web/#3-remove-any-embedded-server-deploy-on-external-server","title":"3. Remove any embedded Server / Deploy on external Server","text":"<ul> <li>remove dependencies for embeded server</li> <li>change to war : war</li> <li>extend SpringBootServletInitializer -&gt; override Configure. <pre><code>   @SpringBootApplication\n   public class DemoApplication extends SpringBootServletInitializer {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n        return application.sources(DemoApplication.class);\n    }\n}\n</code></pre></li> </ul>"},{"location":"00_Springboot/02_web/04_REST/","title":"REST","text":""},{"location":"00_Springboot/02_web/04_REST/#references","title":"references","text":"<ul> <li>https://www.baeldung.com/rest-with-spring-series</li> <li>web filter : https://chatgpt.com/c/34abc85f-eabb-47ac-b525-7c2c6af8023a </li> </ul>"},{"location":"00_Springboot/02_web/04_REST/#rest-actions","title":"REST Actions","text":""},{"location":"00_Springboot/02_web/04_REST/#1-actions-list-1","title":"1 actions list-1","text":"<ul> <li>https://chatgpt.com/c/0471007c-7d4e-4a04-bd37-d6262d5f9aaf - REST Actions</li> <li><code>create</code></li> <li><code>logging interceptor/filter</code> --&gt; not doing, having common logging.</li> <li><code>Content Negotiation</code> - Support different representations : <code>produces/consumes</code> = MediaType.APPLICATION_JSON</li> <li><code>API versioning</code></li> <li><code>API DOC</code></li> <li><code>security</code> - using OAuth2.0</li> <li><code>Validation</code> - using hibernate JSR validator + custom validator anno.</li> <li><code>Formatting</code> - using jackson - custom serialization/de-S..</li> <li><code>CORS</code> setup - add frontend url</li> <li><code>Pagination and Sorting</code> - pageable and page"},{"location":"00_Springboot/02_web/04_REST/#2-more-actions-list-2-pending","title":"2 more actions list-2 (pending)","text":"<ul> <li>Async Controllers: </li> <li>Use @Async(\"taskExecutor-1\") and CompletableFuture to handle long-running requests asynchronously </li> <li>AsyncController.java</li> <li>@EnableAsync - enable</li> <li> <p>create @Bean(name = \"taskExecutor-1\") ThreadPoolTaskExecutor : AsyncConfig.java</p> </li> <li> <p>HATEOS</p> </li> <li>https://chatgpt.com/c/67414b1b-9018-800d-a683-8a632932177a</li> <li>return EntityModel from api method. <li>use WebMvcLinkBuilder to create Link <pre><code>User user1 = new User(id, \"John Doe\", \"john.doe@example.com\"); // current api result\n...\nLink allUsersLink = WebMvcLinkBuilder\n .linkTo(\n     WebMvcLinkBuilder\n        .methodOn(UserController.class)\n        .getAllUsers())                     &lt;&lt;&lt; another controller/api method\n .withRel(\"all-users\");\n ...\n return EntityModel&lt;User&gt;.of(user1, allUsersLink);\n</code></pre></li> <li>sample response : <code>_links</code> <pre><code>{\n  \"id\": 1,\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n\n  \"_links\": {\n      \"all-users\": {\n          \"href\": \"http://localhost:8080/api/users\"\n      }\n  }\n}\n</code></pre></li>"},{"location":"00_Springboot/02_web/04_REST/#a-create-api","title":"A Create API","text":"<ul> <li>check JewelleryController.java</li> <li>@ResponseBody + <code>@Controller</code> =<code>@RestController</code></li> <li>Modify HttpResponse</li> <li>inject <code>HttpServletResponse response</code> as method arg directly and manipulate response.</li> <li>ResponseEntity&lt;?&gt; ResponseEntityBuilder --&gt;  statusCode, headers and body.</li> <li>@ResponseBody - serialized into JSON</li> <li>Bind <code>Map&lt;String,String&gt;</code> with</li> <li>RequestHeader</li> <li>RequestBody</li> <li>PathVariable</li> <li>RequestParam</li> <li>can make above input optional. can set default value for above input.</li> <li>eg:  @PathVariable(value=\"pathVariable2\", required = false) String pathVariable2_optional :</li> </ul>"},{"location":"00_Springboot/02_web/04_REST/#b-validation-jsr-380","title":"B. Validation / JSR 380","text":"<ul> <li>apply on DTO/Bean/ENTITY</li> <li>https://chatgpt.com/c/a04dc001-e879-43e0-a39d-acd01b9ef2c7</li> <li>Add dependeny : spring-boot-starter-validation</li> <li>annotation: <code>@email</code>, <code>@size</code>, <code>@NotBlank(\"\")</code>, etc</li> <li>use <code>@Valid</code> annotation to trigger validation in Controller or where ever binding happens:<ul> <li>@Valid @ResquestBody dto //method arg</li> <li>Apply on method return.</li> </ul> </li> <li>validate response: https://chatgpt.com/c/b8c60911-2df5-478b-9804-67c3ecf9506d</li> </ul>"},{"location":"00_Springboot/02_web/04_REST/#custom-validator","title":"Custom validator","text":"<ul> <li>check hibernate_validator</li> <li>can inject BindingResult as well.</li> <li>just implement <code>ConstraintValidator&lt;Anno,feildType&gt;</code></li> <li>```   // Apply @NameCheckAnnotation_1 on feilds</li> </ul> <p>public class NameValidator implements ConstraintValidator {   @Override   public boolean isValid(String value, ConstraintValidatorContext context) {      return true;   }   }   ``` <ul> <li>implement ResponseBodyAdvice class </li> <li>The default Spring validation mechanism does not automatically validate objects wrapped in ResponseEntity. </li> <li>However, you can achieve this by creating a custom ResponseBodyAdvice implementation.</li> <li>@Valid / @validated :: cannot perform on ResponseEntity.</li> <li>check : https://chatgpt.com/c/591c7b06-4ac0-4f03-a328-038cde9cf7ca</li> </ul>"},{"location":"00_Springboot/02_web/04_REST/#c-formatting-serialize-de-serialize","title":"C. Formatting ( Serialize / De-serialize)","text":"<ul> <li>more: 05_Jackson.md</li> <li>binding happens with internal Serialize/De-serialize by jackson, </li> <li>has inbuilt serializer and de-serializer</li> <li>can create custom ones too.</li> <li>customize objectMapper, check JacksonConfig.java</li> <li>note: String to LocalDateTime : <code>@DateTimeFormat</code> (From SB, not jackson)</li> <li>HttpMessageConverter</li> <li>new MappingJackson2HttpMessageConverter()</li> </ul>"},{"location":"00_Springboot/02_web/04_REST/#d-version","title":"D. Version","text":"<ul> <li>https://chatgpt.com/c/7fa2c12d-eada-4991-944f-cfad8d084805</li> <li>@RequestMapping(\"/api/v1\")</li> <li>@GetMapping(value = \"/users\", <code>params = \"version=1\"</code>)<ul> <li>while consuming, set requestParam :  version=1</li> </ul> </li> <li> <p>@GetMapping(value = \"/users\", <code>headers = \"X-API-VERSION=1\"</code>)</p> <ul> <li>while consuming, set header : X-API-VERSION=1</li> </ul> </li> <li> <p>@GetMapping(value = \"/users\", <code>produces = \"application/vnd.company.app-v1+json\"</code>)</p> <ul> <li>while consuming, set header : Accept=application/vnd.company.app-v1+json</li> </ul> </li> <li> <p>Choosing the Right API versioning Approach:</p> <ul> <li>URI Path Versioning: Clear and straightforward, widely used.</li> <li>Request Parameter Versioning: Useful for flexibility in request parameters.</li> <li>Header Versioning: Keeps the URL clean, suitable for clients that can easily add headers.</li> <li>Content Negotiation Versioning: Good for complex API evolution but can be harder to debug.</li> </ul> </li> </ul>"},{"location":"00_Springboot/02_web/04_REST/#e-rest-consume-pending","title":"E. REST : consume <code>Pending...</code>","text":"<ul> <li>https://chatgpt.com/c/9719e1f6-c4e4-4fac-8941-178c26acc484</li> </ul>"},{"location":"00_Springboot/02_web/04_REST/#resttemplate","title":"RestTemplate","text":""},{"location":"00_Springboot/02_web/04_REST/#webclient","title":"webClient","text":""},{"location":"00_Springboot/02_web/04_REST/#f-hateoas-pending","title":"F. HATEOAS <code>Pending...</code>","text":"<ul> <li>add hypermedia links to the API responses, enabling clients to navigate the API dynamically</li> <li>hands-on pending.</li> </ul>"},{"location":"00_Springboot/02_web/04_REST/#project-pending","title":"project : <code>Pending...</code>","text":"<ul> <li>SetTimeouts API</li> <li>API to download file.</li> <li>Filters and Interceptors / <code>InterceptorRegistry</code></li> <li>webClient and RestTemplate</li> <li>custom Binder</li> <li>ResponseBodyAdvice program</li> <li><code>@WebFilter</code></li> <li>Send response other than JSON</li> </ul>"},{"location":"00_Springboot/02_web/05_Jackson/","title":"jackson","text":""},{"location":"00_Springboot/02_web/05_Jackson/#reference","title":"reference","text":"<ul> <li>https://chatgpt.com/c/0f8b8a16-cab5-4fbb-8f0e-1c7949dd97f4 - anno 1</li> <li>https://chatgpt.com/c/cbe3f6c3-c238-4db8-99e5-a0c9c9ddffec - anno 2</li> <li>https://chatgpt.com/c/4334405c-e8c0-4e88-a138-a53b14ae52b5 - object mapper</li> <li>https://www.baeldung.com/jackson</li> </ul> <ul> <li>Json , JsonStr , Object , JsonNode(asText(), readTree())</li> <li>Objectmapper / Xmlmapper API</li> <li>@ResquestBody and @responseBody behind the scene perform S and D using OM.</li> <li>Advance Section pending : https://www.baeldung.com/jackson</li> </ul>"},{"location":"00_Springboot/02_web/05_Jackson/#common-task","title":"Common task","text":"<ol> <li>Serialize and Deserialize </li> <li>Class, generic-Class</li> <li>interface and abstractClass : Does not work.</li> <li>property order, alias, root</li> <li>Type/property </li> <li>@JsonAlias</li> <li>@JsonUnwrapped - performs flattening. {a,{b,c}} === {a,b,c}</li> <li>@JsonSetter is an alternative to @JsonProperty that marks the method as a setter method.</li> <li>@JsonIgnore, @JsonIgnoreType, @JsonFilter - conditionally ignore.</li> <li>@JsonInclude(Include.NOT_NULL) , @JsonIncludeProperties class</li> <li>globally set : om.setSerializationInclusion(Include.NON_NULL);</li> <li>formatting : date, time, number, etc : </li> <li>@DateTimeFormat(fromSB)</li> <li>om.setDateFormat(new SimpleDateFormat(\" \"))</li> <li>handle collection.</li> <li>@JsonCreator(apply on constructor/method to create/return object)    tune the constructor/factory used in deserialization.</li> </ol> <p><pre><code>    - String jsonCarArray =\"[{ \\\"color\\\" : \\\"Black\\\", \\\"type\\\" : \\\"BMW\\\" }, { \\\"color\\\" : \\\"Red\\\", \\\"type\\\" : \\\"FIAT\\\" }]\";\n      List&lt;Car&gt; listCar = objectMapper.readValue(jsonCarArray, new TypeReference&lt;List&lt;Car&gt;&gt;(){});\n\n    - String json = \"{ \\\"color\\\" : \\\"Black\\\", \\\"type\\\" : \\\"BMW\\\" }\";\n      Map&lt;String, Object&gt; map = objectMapper.readValue(json, new TypeReference&lt;Map&lt;String,Object&gt;&gt;(){});\n</code></pre> 5. handle raw json 6. handle Enums - @JsonValue for S, @JsonCreator for D      ```    // Default    public enum Status {SUCCESS,FAILURE,PENDING}       String json = mapper.writeValueAsString(Status.SUCCESS); //  \"\\\"SUCCESS\\\"\"       Status status = mapper.readValue(json, Status.class); // SUCCESS</p> <p>// @JsonValue for S, @JsonCreator for D     public enum Status {String v;SUCCESS(\"S\"),FAILURE(\"F\"),PENDING(\"P\");     Status(string v){}      @JsonValue getValue(v)     @JsonCreator m(v){...}    }      String json = mapper.writeValueAsString(Status.SUCCESS); //  \"\\\"S\\\"\"      Status status = mapper.readValue(json, Status.class); // S    <code>7. Don't use Optional&lt;T&gt; as json property.    - Add Dependencies : jackson-datatype-jdk8.    - objectMapper.registerModule(new Jdk8Module());    -</code>      @JsonInclude(JsonInclude.Include.NON_ABSENT) // Optional fields are included if present      public class Event {         private String name;         private Optional description;      }      ``` 8. handle visibilty: @JsonAutoDetect(fieldVisibility = Visibility.ANY) // Private feild. etc. 9."},{"location":"00_Springboot/02_web/05_Jackson/#advance-task","title":"Advance task","text":"<ol> <li>inject<ul> <li>@JacksonInject indicates that a property will get its value from the injection and not from the JSON data.    <pre><code>   InjectableValues inject = new InjectableValues.Std().addValue(int.class, 1);\n   BeanWithInject bean = new ObjectMapper()\n                         .reader(inject)\n                         .forType(BeanWithInject.class)\n                         .readValue(json);\n</code></pre> 2.</li> </ul> </li> </ol>"},{"location":"00_Springboot/02_web/05_Jackson/#objectmapper","title":"Objectmapper","text":"<ul> <li>Builder pattern</li> </ul>"},{"location":"00_Springboot/02_web/05_Jackson/#serialize","title":"Serialize","text":"<ul> <li>writeValue(obj) or </li> <li>writeValueAsString(obj)</li> <li>Apply Filter :</li> <li>@JsonFilter(\"Filter-1\") class</li> <li>om.writer(SimpleFilterProvider p).writeValue(obj) //p.addFilter(\"Filter-1\", filterObject eg:SimpleBeanPropertyFilter)</li> </ul>"},{"location":"00_Springboot/02_web/05_Jackson/#de-serialize","title":"De-serialize","text":"<ul> <li>readvalue (json, TypeReference) <li>readerFor(T).readValue(obj)</li>"},{"location":"00_Springboot/02_web/05_Jackson/#config","title":"Config","text":"<ul> <li> <p>unknown/incomplete</p> <ul> <li>FAIL_ON_UNKNOWN_PROPERTIES , @JsonIgnoreProperties(ignoreUnknown = true) MyClass</li> <li>FAIL_ON_NULL_FOR_PRIMITIVES : unmarshalling an incomplete JSON :  @JsonProperty(required = false.True)</li> </ul> </li> <li> <p>mapper.enable(DeserializationFeature.UNWRAP_ROOT_VALUE);</p> </li> <li>WRITE_DATES_AS_TIMESTAMPS,</li> <li>DEFAULT_VIEW_INCLUSION,</li> <li>INDENT_OUTPUT </li> <li>OM &gt;&gt; register module &gt;&gt; add custom S and D</li> <li>OM.configure(k,v)</li> <li>on DTO &gt;&gt; Apply annotation</li> <li>https://chatgpt.com/c/0f8b8a16-cab5-4fbb-8f0e-1c7949dd97f4</li> <li>https://chatgpt.com/c/cbe3f6c3-c238-4db8-99e5-a0c9c9ddffec</li> <li>spring.jackson..=true,false<ul> <li>spring.jackson.serialization.indent_output=true</li> <li>spring.jackson.deserialization.fail-on-unknown-properties=false</li> <li>spring.jackson.mapper.auto-detect-fields=true // @JsonAutoDetect</li> <li>spring.jackson.parser.allow-comments=true</li> <li>spring.jackson.generator.escape-non-ascii=true   <pre><code>      return new ObjectMapper()\n          .enable(SerializationFeature.INDENT_OUTPUT)             // Enable pretty printing\n          .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES) // Ignore unknown properties\n          .enable(MapperFeature.AUTO_DETECT_FIELDS)              // Auto-detect fields\n          .enable(JsonParser.Feature.ALLOW_COMMENTS)             // Allow comments in JSON\n          .enable(JsonGenerator.Feature.ESCAPE_NON_ASCII); \n</code></pre></li> </ul> <ul> <li>UnrecognizedPropertyException : objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);</li> <li>extends Std/JsonSerializer --&gt; serialize(T object, JsonGenerator jsonGenerator, SerializerProvider serializer) {...} <li>extends Std/JsonDeserializer  --&gt; T deserialize(JsonParser parser, DeserializationContext deserializer) {...} <li>@JsonCreator : Apply on contructor (@jsonproperty on arg). that constructor is used while unmarshalling</li> <li>@JsonDeserialize(as = Cat.class) Animal a ; // Animal is Interface.</li> <li>@JsonFormat : specifies a format when serializing Date/Time values</li> <li>usally used for java,util.Date, Double price (patter=\"#0.00\")</li> <li>@JsonFormat(shape = JsonFormat.Shape.String, pattern=\"\") Date // </li> <li>@JsonFormat(shape = JsonFormat.Shape.NUMBER) Date //Timeinmilliseconds</li> <li>@JsonFormat(with = JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES) class  // IMP</li>"},{"location":"00_Springboot/02_web/06_swagger/","title":"Swagger","text":""},{"location":"00_Springboot/02_web/06_swagger/#enable-swagger","title":"Enable swagger","text":"<ul> <li>add dependeny <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n    &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;3.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n\n or\n\n &lt;dependency&gt;\n    &lt;groupId&gt;org.springdoc&lt;/groupId&gt;\n    &lt;artifactId&gt;springdoc-openapi-ui&lt;/artifactId&gt;\n    &lt;version&gt;1.5.12&lt;/version&gt;\n&lt;/dependency&gt;\n\nor\n\n&lt;dependency&gt;\n    &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;\n    &lt;version&gt;3.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n\nor\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springdoc&lt;/groupId&gt;\n    &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;    &lt;&lt;&lt; worked, didnt add anything else\n    &lt;version&gt;2.1.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>add config </li> <li>Docker bean</li> <li>@EnableSwagger2WebMvc <pre><code>@Configuration\n@EnableSwagger2WebMvc / @EnableSwagger2\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.example.demo\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n}\n</code></pre></li> <li>http://localhost:8080/swagger-ui/index.html</li> </ul>"},{"location":"00_Springboot/02_web/06_swagger/#customize","title":"Customize","text":"<ul> <li>check : controller</li> <li>Annotation:</li> <li>@Tag/@Api,</li> <li>@ApiOperation,</li> <li>@ApiResponse,</li> <li>@ApiParam.</li> </ul>"},{"location":"00_Springboot/02_web/07_error_handling/","title":"Global Error handling","text":""},{"location":"00_Springboot/02_web/07_error_handling/#a-in-spring-mvc-project","title":"A. in <code>spring MVC project</code>","text":""},{"location":"00_Springboot/02_web/07_error_handling/#1-send-html-response-for-specific-error-code-404","title":"1. send html response for specific error code - 404","text":"<ul> <li>add html page --&gt; resource/templates/404.html </li> <li>add property server.error.404 = /error/path-404</li> <li>add controller.</li> <li>extract <code>ErrorAttributes</code> from  <code>WebRequest</code> <pre><code>@Controller\npublic class ErrorController\n{\n    @Autowired  ErrorAttributes errorAttributes    &lt;&lt;&lt;\n\n    @RequestMapping(\"/error/path-404\")\n    public String handle404Error(WebRequest webRequest) \n    {\n        ErrorAttributeOptions options = ErrorAttributeOptions.of(\n            ErrorAttributeOptions.Include.MESSAGE, \n            ErrorAttributeOptions.Include.EXCEPTION\n            );\n\n        Map&lt;String, Object&gt; errorAttributes = this.errorAttributes.getErrorAttributes(webRequest, options);\n        // errorAttributes has exception detail, which can be include in html page.\n        // add it to model object.\n        // in html - ${errorAttribite.xxxxx}\n\n        return \"404\"; //view name\n    }\n}\n</code></pre></li> </ul>"},{"location":"00_Springboot/02_web/07_error_handling/#b-in-rest-api","title":"B. in <code>REST API</code>","text":""},{"location":"00_Springboot/02_web/07_error_handling/#default-handling-flow","title":"Default handling flow","text":"<ul> <li>when an exception occurs, it is automatically routed to below path.</li> <li>define server.error.path = /error</li> <li>BasicErrorController is mapped to this path. </li> <li>it processes and send out json response</li> <li>```   // Sample resposne:</li> </ul> <p>{   \"timestamp\": \"2024-11-20T00:00:00.000+00:00\",   \"status\": 404,   \"error\": \"Not Found\",   \"message\": \"No message available\",   \"path\": \"/some-endpoint\"   }   <code>``   - fact: add more attribute in above response     - @Component public class CustomErrorAttributes extends</code>DefaultErrorAttributes` : just add this bean     - check: CustomErrorAttributes.java     - add custome attribute</p>"},{"location":"00_Springboot/02_web/07_error_handling/#customization-1-basicerrorcontroller","title":"customization-1 : BasicErrorController","text":"<ul> <li>note: don't define server.error.404,etc</li> <li>when any Exception occurs, it is automatically routed to below path</li> <li>define server.error.path = /my-error-path </li> <li>or just keep /error</li> <li>add new @RestController for above path</li> <li>extract ErrorAttributes  from webRequest. like above.</li> <li>will send out json response.</li> <li>@Component class MyBasicErrorController extends ErrorController { @GetMapping(/my-error-path) m()}</li> <li>MyBasicErrorController.java</li> </ul>"},{"location":"00_Springboot/02_web/07_error_handling/#customization-2-controlleradvice","title":"customization-2 (@ControllerAdvice)","text":"<ul> <li>httpRequest send &gt; No issue - no 401,no 500, etc &gt; controller method m1() gets executed.</li> <li>next m1() throws exceptions</li> <li>can have different handler for different exception type.</li> <li>@ExceptionHandler(Exception.class) RE&lt;&gt; m1(Exception e, WebRequest request) { use e ... }</li> <li>@ExceptionHandler(Exception2.class) RE&lt;&gt; m1(Exception2 e, WebRequest request) {...}</li> <li>...</li> </ul>"},{"location":"00_Springboot/02_web/07_error_handling/#customization-3-disable-tomcat-whitelabel-errorpage","title":"customization-3 :: Disable tomcat Whitelabel-ErrorPage","text":"<ul> <li>@EnableAutoConfiguration(exclude = {<code>ErrorMvcAutoConfiguration.class</code>}) --&gt; shows Tomcat page then.</li> <li>or, server.error.whitelabel.enabled=false</li> </ul>"},{"location":"00_Springboot/02_web/07_error_handling/#inbound-outbound-flows-green_circle","title":"inbound / outbound flows :green_circle:","text":"<p>case:1 : incoming request failed, then: -  /error + BasicErrorController (already). -  /my-error + MyBasicErrorController (custom) + inject ErrorAttribute.</p> <p>case-2 : incoming requested success, but business code failed with Exception. - Global Exception Handling - @ControllerAdvice/@RestControllerAdvice + @ExceptionHandler(Exception.class)</p>"},{"location":"00_Springboot/02_web/08_gRPC%2Bwebflux/","title":"gRPC (Google <code>Remote Procedure Call</code>)","text":"<ul> <li>open-source</li> <li>language-agnostic</li> <li>highly efficient for <code>microservices</code> comm.</li> <li><code>binary</code> serialized Protobuf payloads  (Harder to debug)</li> </ul>"},{"location":"00_Springboot/02_web/08_gRPC%2Bwebflux/#grpc-over-http2-default","title":"gRPC over HTTP/2 (default)","text":"<ul> <li>gRPC with HTTP/1.1 (Less Common but Possible)</li> <li>reduced latency </li> <li>bi-directional streaming - Server streaming, client streaming, and bi-directional streaming.</li> <li>multiplexing -  multiple calls on a single connection</li> <li>load balancing</li> <li>built in - Authentication, compression, SSL, and retries</li> </ul>"},{"location":"00_Springboot/02_web/08_gRPC%2Bwebflux/#grpc-webfor-browser-clients","title":"gRPC-Web((For Browser Clients)","text":"<ul> <li>ng/react uses </li> <li>gRPC-Web, which uses HTTP/1.1 or HTTP/2 in the browser to communicate with the backend gRPC services</li> </ul>"},{"location":"00_Springboot/02_web/08_gRPC%2Bwebflux/#steps","title":"Steps","text":"<ul> <li>proto file : user.proto.bkp</li> <li>pom.xml</li> <li>mvn compile.</li> <li>check target folder for stub. <pre><code>&lt;plugin&gt;\n                &lt;groupId&gt;org.xolstice.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;protobuf-maven-plugin&lt;/artifactId&gt;\n                &lt;version&gt;0.6.1&lt;/version&gt;\n                &lt;executions&gt;\n                    &lt;execution&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;compile&lt;/goal&gt;\n                            &lt;goal&gt;compile-custom&lt;/goal&gt;\n                        &lt;/goals&gt;\n                    &lt;/execution&gt;\n                &lt;/executions&gt;\n                &lt;configuration&gt;\n                    &lt;protoSourceRoot&gt;src/main/proto&lt;/protoSourceRoot&gt;\n                    &lt;pluginId&gt;grpc-java&lt;/pluginId&gt;\n                &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre> <pre><code>        &lt;!--g-rpc--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.grpc&lt;/groupId&gt;\n            &lt;artifactId&gt;grpc-netty&lt;/artifactId&gt;\n            &lt;version&gt;1.57.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.grpc&lt;/groupId&gt;\n            &lt;artifactId&gt;grpc-protobuf&lt;/artifactId&gt;\n            &lt;version&gt;1.57.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.grpc&lt;/groupId&gt;\n            &lt;artifactId&gt;grpc-stub&lt;/artifactId&gt;\n            &lt;version&gt;1.57.0&lt;/version&gt;\n        &lt;/dependency&gt;\n</code></pre></li> <li>client code: <pre><code>import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport com.example.grpc.UserProto;\nimport com.example.grpc.UserServiceGrpc;\n\npublic class UserGrpcClient {\n    public static void main(String[] args) {\n        ManagedChannel channel = ManagedChannelBuilder.forAddress(\"localhost\", 9090)\n            .usePlaintext()\n            .build();\n\n        UserServiceGrpc.UserServiceBlockingStub blockingStub = UserServiceGrpc.newBlockingStub(channel);\n\n        // Create a request\n        UserProto.UserRequest request = UserProto.UserRequest.newBuilder()\n            .setUserId(\"123\")\n            .build();\n\n        // Make a gRPC call\n        UserProto.UserResponse response = blockingStub.getUser(request);\n        System.out.println(\"User Details: \" + response.getName() + \", \" + response.getEmail());\n\n        channel.shutdown();\n    }\n}\n</code></pre></li> </ul>"},{"location":"00_Springboot/02_web/09_webflux/","title":"webflux (in progress)","text":"<ul> <li>websocket</li> <li>Http 2/3</li> </ul>"},{"location":"00_Springboot/03_data-layer/00_common_task/","title":"Common task","text":""},{"location":"00_Springboot/03_data-layer/00_common_task/#set-default-value","title":"Set Default value","text":"<ul> <li>@Column(columnDefinition = \"varchar(255) default 'John Snow'\")</li> <li>Inside Entity class </li> <li>private String firstName = \"John Snow\";</li> </ul>"},{"location":"00_Springboot/03_data-layer/00_common_task/#constraint-nullable","title":"constraint - <code>Nullable</code>","text":"<ul> <li>@Column(nullable=t/f)</li> <li>@Basic(optional=t/f)</li> <li>hibernate validator - <code>@NotNull</code> </li> <li>can apply on any bean, not just entity eg:jackson.</li> </ul>"},{"location":"00_Springboot/03_data-layer/00_common_task/#constraint-unique","title":"Constraint - <code>unique</code>","text":"<ul> <li>@Column(unique=t/f) : Single column</li> <li>unique composite key:   <pre><code>@Table(uniqueConstraints = {\n   @UniqueConstraint(columnNames = { \"personNumber\", \"isActive\" }) ,\n   @UniqueConstraint(columnNames = { \"personNumber\" }) \n }, ...)\n</code></pre></li> </ul>"},{"location":"00_Springboot/03_data-layer/01_JPA/","title":"JPA","text":"<ul> <li>Reference</li> <li>all topics: https://www.baeldung.com/learn-jpa-hibernate</li> <li>inheritance : https://www.baeldung.com/hibernate-inheritance</li> </ul>"},{"location":"00_Springboot/03_data-layer/01_JPA/#jpa","title":"JPA","text":""},{"location":"00_Springboot/03_data-layer/01_JPA/#intro","title":"Intro","text":"<ul> <li>JPA Specification --&gt; ORM layer (focus)</li> <li>interact with a relational database without any SQL.</li> <li>eg: Hibernate framework</li> <li>first/Second level Cache. </li> <li>Entity</li> <li>lifecycle state : New/Transient &gt; managed &gt; detached &gt; removed/Deleted(markedForDelete).</li> <li>Transient - POJO which has no representation in the PC.</li> <li>relationships </li> <li>inheritance </li> <li>(EntityManager / EntityManagerFactory) or  (Session / sessionFactory in Hibernate)</li> <li>heap(object) &lt;&gt; PC(managed entity) &lt;&gt; Database</li> <li>provide API to interact with PC. more on PC 02_presistence-context.md<ul> <li>session.persist : mark for save</li> <li>session.merge : move to pc</li> <li>session.refresh : sync with DB</li> <li>session.remove : marked for delete</li> <li>session.detach : remove from pc</li> <li>session.flush</li> </ul> </li> </ul>"},{"location":"00_Springboot/03_data-layer/01_JPA/#a-key-componentsbean-to-build-for-develop","title":"A. key components/bean to build for develop:","text":"<ul> <li>SessionFactory<ul> <li>heavy, Created at startup in SB project</li> <li>rename bean : @Bean(name = \"entityManagerFactory\") LocalSessionFactoryBean m(){...}</li> </ul> </li> <li>TransactionManager <ul> <li><code>PlatformTransactionManager</code> --impl--&gt; HibernateTransactionManager, JpaTransactionManager</li> </ul> </li> <li>TransactionTemplate <ul> <li>HibernatePostgresConfig.java</li> <li>can set global ISOLATION LEVEL here </li> </ul> </li> <li>Datasource <ul> <li>database connections pool</li> <li>eg: hikari, javax.sql.DataSource, etc</li> <li>use DataSourceBuilder</li> </ul> </li> <li>repositories<ul> <li>way-1: @Repository public interface ProductRepository extends JpaRepository { ... } <li>has @PersistenceContext(type = PersistenceContextType.TRANSACTIONAL)</li> <li>way-2: https://chat.deepseek.com/a/chat/s/8e1072c2-9522-4d97-8c6b-d6cdc8ef7c97</li> <li>this is custom repo</li> <li>check more eg: StudentRepository.java <pre><code>@Repository\npublic class ExtendedPersistenceContextRepository \n{\n    @PersistenceContext(type = PersistenceContextType.EXTENDED)\n    //@PersistenceContext(type = PersistenceContextType.TRANSACTIONAL)\n    private EntityManager entityManager;\n\n    public void addToPersistenceContext(User user) {        entityManager.persist(user);     }\n\n    @Transactional\n    public void saveChanges() {        entityManager.flush();     }  // explicit flush  &lt;&lt;&lt;\n    ...\n}\n</code></pre></li>"},{"location":"00_Springboot/03_data-layer/01_JPA/#b-jpa-entity-lifecycle-events","title":"B JPA Entity - Lifecycle Events","text":"<ul> <li>create MyListener.class</li> <li>add method/s and annotate with :</li> <li>@PrePersist m(), @PostPersist m(),</li> <li>@PreRemove m(), @PostRemove m(),</li> <li>@PreUpdate m(), @PostUpdate m(),</li> <li>@PostLoad m()</li> <li>go to @Entity MyEntity</li> <li>annotate entity class with <code>@EntityListeners</code>(MyListener.class) </li> <li>fact : </li> <li>@GeneratedValue - expect key to available in @PostPersist.</li> </ul>"},{"location":"00_Springboot/03_data-layer/01_JPA/#c-relationship","title":"C Relationship","text":"<ul> <li>owner owns the foreign key and defines @JoinColumn(name=\"newName\")</li> <li>uni-directional or bi-directional : both has references of each other.</li> <li>project : entities</li> <li></li> </ul>"},{"location":"00_Springboot/03_data-layer/01_JPA/#1-2-1","title":"<code>1-2-1</code>","text":"<ul> <li>any class can be owner</li> <li>other class : mapperBy=propertyName mentioned in owner-class.</li> </ul>"},{"location":"00_Springboot/03_data-layer/01_JPA/#c11-2-m-and-c2m-2-1owner-many-side","title":"<code>C1:1-2-M and C2:M-2-1(owner : many side)</code>","text":"<ul> <li>C1:mapperBy=propertyName mentioned in owner-class</li> <li>more anno:</li> <li><code>@order</code> + <code>@BatchSize</code> + @OneToMany</li> <li><code>@fetch(FetchMode.SELECT/JOIN/SUBSELECT)</code> + @OneToMany(fetch = FetchType.LAZY/EAGER)</li> <li>@fetch() : from Hibernate <ul> <li>defines <code>how</code> the associated entities are fetched from the database. meaning <code>SQS queries</code>.</li> <li>@Fetch(FetchMode.XXXXXX)</li> <li>SELECT: Specifies that associated entities should be fetched lazily, using a separate SELECT statement.</li> <li>JOIN: Specifies that associated entities should be fetched eagerly using a single JOIN query.</li> <li>SUBSELECT: Specifies that associated entities should be fetched lazily using a single SELECT query with a subselect.</li> </ul> </li> </ul>"},{"location":"00_Springboot/03_data-layer/01_JPA/#c1m-2-m-and-c2m-2-m","title":"<code>C1:M-2-M and C2:M-2-M</code>","text":"<ul> <li>no one is owner.</li> <li>create @JoinTable.</li> <li>use this to filter data : <code>@WhereJoinTable</code> </li> <li>can check: https://www.baeldung.com/hibernate-wherejointable</li> <li>use @order, @BatchSize, @fetch here as well <pre><code>    @WhereJoinTable(clause = \"col of join table\" = \"value-1\")   &lt;&lt;&lt;\n\n    @ManyToMany\n    @JoinTable(\n      name = \"student_course\",\n      joinColumns = @JoinColumn(name = \"student_id\"),\n      inverseJoinColumns = @JoinColumn(name = \"course_id\")\n    )\n</code></pre></li> <li>Cascade operation in relationship : ALL ,PERSIST, MERGE, REMOVE, REFRESH, DETACH</li> <li>https://www.baeldung.com/jpa-cascade-types</li> <li>@OneToMany( Cascade operation )</li> </ul>"},{"location":"00_Springboot/03_data-layer/01_JPA/#d-inheritance","title":"D Inheritance","text":"<ul> <li>let's have </li> <li>parent-Entity (2 col,2 record) </li> <li>Child-1-Entity(2 col, 2 record)</li> <li>Child-2-Entity (2 col, 2 record)`</li> <li>Strategies:</li> <li><code>Single table</code> (6 col) <ul> <li>for all 3 entities with <code>discrminator</code> column / lots of null /</li> </ul> </li> <li><code>table per class</code> :<ul> <li>parent class table1 - 2 col - won't be used, will be having 0 record</li> <li>Child-1 class table2 - 4 col</li> <li>Child-2 class table3 - 4 col</li> </ul> </li> <li><code>Joined</code> :<ul> <li>meaning Joined subclass. child joined to parent</li> <li>Like table per class, but child table will have only prop defined in entity, not from parent.</li> <li>parent class table1 - 2 col</li> <li>Child-1 class table2 - 2+1 col (additional 1 FK to parent table)</li> <li>Child-2 class table3 - 2+1 col (additional 1 FK to parent table)</li> </ul> </li> <li><code>MappedSuperclass</code> \u2013 the parent classes, can\u2019t be entities.<ul> <li>Child-1 class table2 - 2+2 col</li> <li>Child-2 class table3 - 2+2 col</li> </ul> </li> </ul>"},{"location":"00_Springboot/03_data-layer/02_presistence-context/","title":"Persistence Context","text":"<ul> <li>https://chatgpt.com/c/9a8dd8ab-71b5-49d6-bcfe-8d9b0aa31971</li> <li>@PersistenceContext(unitName = \"entityManagerFactory_for_postgres\") private EntityManager entityManagerPostgres; </li> </ul>"},{"location":"00_Springboot/03_data-layer/02_presistence-context/#persistencecontext-pc","title":"persistenceContext / PC","text":""},{"location":"00_Springboot/03_data-layer/02_presistence-context/#a-intro","title":"A Intro","text":"<ul> <li>Like Spring IAC.</li> <li>runtime environment in which entity instances and lifecycle are managed. </li> <li>EntityManager or Session(H) </li> <li>thread not safe : meaning C R U D methods does not have sync and lock code.</li> <li>used to interact with pc</li> <li> <p><code>@persistenceContext</code> Session session : inject like this.</p> </li> <li> <p>acts as a first-level cache. </p> </li> <li>reduce Db calls</li> <li>improved porformance</li> <li>manages entity life cycle</li> <li>states:: <ul> <li><code>Transient</code>(new) &gt; <code>managed</code>(merged()) &gt; <code>detached</code> (detach()) </li> <li>managed :: delete(markedForDelete)</li> <li>managed :: persist(markedForDelete)</li> <li>managed :: update(update existing managed entity)</li> <li>managed :: merged&amp;Update(load and update entity)</li> </ul> </li> <li>keeps track of changes made to managed entities.</li> <li>flush <code>dirty entities</code> to DB, on txn::commit</li> <li>session/em API <ul> <li>persist,merge,detach,find,remove,refresh / Flush and close</li> <li>utility: view allManagedEntity, dirtyEntity,etc</li> </ul> </li> </ul>"},{"location":"00_Springboot/03_data-layer/02_presistence-context/#b-types","title":"B Types","text":""},{"location":"00_Springboot/03_data-layer/02_presistence-context/#1-transaction-scoped-default-in-sb","title":"1 Transaction-scoped (default in sb) **","text":"<ul> <li>tied to the transaction.</li> <li>It is created when the transaction starts and is closed when the transaction ends.</li> <li>eg: Spring-boot-jpa -  @EnableTransactionManagement c, then @Transaction m()</li> <li>fact:</li> <li>used in cg maps</li> <li>not need for micro-services arch.</li> </ul>"},{"location":"00_Springboot/03_data-layer/02_presistence-context/#2-extended","title":"2 Extended.","text":"<ul> <li>workflows where a sequence of operations spans multiple transactions / stateful App. @PersistenceContext(type = PersistenceContextType.EXTENDED)</li> <li>Scenario/usecase for extended PC: stateful App <pre><code>  A multi-step checkout process in an e-commerce application where a user needs to add items to the cart,\n  provide shipping details, and make a payment. Each step might be handled by separate transactions,\n  but the cart and order entities need to be kept consistent throughout the process.\n</code></pre></li> <li>Downsides:</li> <li>Requires explicit flush to synchronize with database </li> <li>can introduce complexity in handling concurrency and transaction boundaries.</li> <li>Increased Memory Usage + the risk of stale data.</li> <li>Longer response times and potential deadlocks if not managed carefully</li> </ul>"},{"location":"00_Springboot/03_data-layer/02_presistence-context/#c-scenarios","title":"C Scenarios","text":""},{"location":"00_Springboot/03_data-layer/02_presistence-context/#multi-http-request-environment-in","title":"multi-Http request environment (in ||)","text":"<ol> <li>PC per request</li> <li>http req1 --&gt; thread-1 --&gt; txn-1 --&gt; PC-1 --&gt; commit --&gt; flush to DB</li> <li>http req2 --&gt; thread-2 --&gt; txn-2 --&gt; PC-2 --&gt; commit --&gt; flush to same DB. (override)</li> <li>Summary:</li> <li>Each HTTP request typically runs in its own thread and transaction.</li> <li>Transactions are isolated from each other, but \"concurrency-control-mechanisms\"/isolation ensure data consistency.</li> <li>Persistence contexts are tied to transactions and are independent for each request, ensuring that changes made in one request do not affect others until committed.</li> <li>Careful design and configuration are necessary to handle concurrency and transaction management effectively in a multi-request environment.</li> <li> <p>Developer has to write thread-safe code/ concurrent access code, etc</p> </li> <li> <p>PC shared by multiple request.</p> </li> <li>Service class &gt; @PC(Extended) Session/Em &gt; @T m1() + @T m2() + ...</li> <li> <p>PROS : less DB call, fast | CONS : handle concurrency</p> </li> <li> <p>Global PC</p> </li> <li>use second level cache.</li> <li> <p>PROS : very less DB call, faster | CONS : handle global concurrency</p> </li> <li> <p>check more : https://chatgpt.com/c/9a8dd8ab-71b5-49d6-bcfe-8d9b0aa31971</p> </li> </ol>"},{"location":"00_Springboot/03_data-layer/03_ACID%2BLocks/","title":"ACID & Locks","text":"<ul> <li>https://chatgpt.com/c/22d9f577-17f2-4d43-9013-401b18ca58e0</li> </ul>"},{"location":"00_Springboot/03_data-layer/03_ACID%2BLocks/#1-acid-principle","title":"1. ACID principle","text":"<ul> <li>All DB has underlying solution for ACID</li> </ul>"},{"location":"00_Springboot/03_data-layer/03_ACID%2BLocks/#atomicity","title":"Atomicity","text":"<ul> <li>start txn</li> <li>unit of work </li> <li>commit txn</li> </ul>"},{"location":"00_Springboot/03_data-layer/03_ACID%2BLocks/#consistency","title":"Consistency","text":"<ul> <li>pk</li> <li>fk</li> <li>constraints</li> </ul>"},{"location":"00_Springboot/03_data-layer/03_ACID%2BLocks/#isolation","title":"ISOLATION","text":"<ul> <li>READ_UNCOMMITTED &gt;&gt; READ_COMMITTED &gt;&gt; REPEATABLE_READ &gt;&gt; SERIALIZABLE</li> <li>code <pre><code>@Transactional(isolation = Isolation.READ_COMMITTED)\n    public void standardOperation() {\n        // ...\n    }\n\nSHOW default_transaction_isolation;  -- Typically \"read committed\"\nALTER SYSTEM SET default_transaction_isolation = 'repeatable read';  &lt;&lt;&lt;\n</code></pre></li> </ul>"},{"location":"00_Springboot/03_data-layer/03_ACID%2BLocks/#1-write-lock-present-default","title":"1. write lock (present default)","text":"<ul> <li>problem : <code>no concurrency at all</code></li> <li>txn1 , txn2 --&gt; both are writing same record same time.</li> <li>solution is <code>write-lock</code></li> <li>txn-1 took w-lock &gt; performing write</li> <li>txn-2 waits</li> <li>txn-1 done</li> <li>txn-2 took w-lock</li> </ul>"},{"location":"00_Springboot/03_data-layer/03_ACID%2BLocks/#2-readwrite-lock","title":"2. read/write lock","text":"<ul> <li>problem : <code>Dirty read</code> (READ_UNCOMMITTED) :left_point:</li> <li>txn1  --&gt; writing same record same time.</li> <li>txn3 --&gt; reading</li> <li>solution is <code>read/write lock</code> (READ_COMMITTED) :left_point:<ul> <li>txn-1 took w-lock &gt; performing write</li> <li>txn-3 waits</li> <li>txn-1 done</li> <li>txn-2 took R-lock &gt;&gt; read</li> </ul> </li> </ul>"},{"location":"00_Springboot/03_data-layer/03_ACID%2BLocks/#3-versionsanpshot","title":"3. version/sanpshot","text":"<ul> <li>problem : <code>no repeating read</code></li> <li>txn-1 took w-lock &gt; performing write</li> <li>txn-2 waits</li> <li>txn-1 done</li> <li>txn-2 took R-lock &gt;&gt; Read </li> <li>txn-1 took w-lock &gt; performing write AGAIN :left_point:</li> <li>txn-2 should read it again and get updated value.</li> <li>solution is <code>version/sanpshot</code> (REPEATABLE_READ) :left_point:<ul> <li>txn-2 will get latest from latest version</li> </ul> </li> </ul>"},{"location":"00_Springboot/03_data-layer/03_ACID%2BLocks/#4-range-lock","title":"4. range lock","text":"<ul> <li>problem : <code>phantom read</code></li> <li>solution - range lock (SERIALIZABLE) :left_point:</li> </ul> <p><pre><code>## SUMMARY ##\n\nIsolation_Level     Dirty_Reads     Non-Repeatable-Reads    Phantom-Reads\nREAD_UNCOMMITTED    \u2717               \u2717                       \u2717\nREAD_COMMITTED      \u2713               \u2717                       \u2717\nREPEATABLE_READ     \u2713               \u2713                       \u2717\nSERIALIZABLE        \u2713               \u2713                       \u2713\n</code></pre> <pre><code># postgres\nBEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n\n# jdbc\nConnection conn = dataSource.getConnection();\nconn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\n</code></pre></p>"},{"location":"00_Springboot/03_data-layer/03_ACID%2BLocks/#durability","title":"Durability","text":"<ul> <li>data never crashes</li> </ul>"},{"location":"00_Springboot/03_data-layer/03_ACID%2BLocks/#2-lock","title":"2. Lock","text":""},{"location":"00_Springboot/03_data-layer/03_ACID%2BLocks/#optimistic-locks","title":"optimistic Locks","text":"<ul> <li>read TS, Write TS, etc (TS=timestampe and version)</li> <li>add in entity : <code>@Version</code> private long version;</li> <li><code>ObjectOptimisticLockingFailureException</code></li> <li>Advantages</li> <li>Better performance than pessimistic locking</li> <li>No database locks held </li> <li>Works well for low-contention scenarios</li> <li>Suitable for web applications with short transactions</li> </ul>"},{"location":"00_Springboot/03_data-layer/03_ACID%2BLocks/#pessimistic-locks-postgresql","title":"pessimistic Locks (postgresQL)","text":""},{"location":"00_Springboot/03_data-layer/03_ACID%2BLocks/#row-level-lock","title":"Row level lock","text":"<ul> <li>mechanism</li> <li>SELECT FOR UPDATE (Row-Level Write Lock)</li> <li>SELECT FOR SHARE (Row-Level Read Lock)</li> <li>SELECT FOR NO KEY UPDATE (Weaker Write Lock)</li> <li> <p>SELECT FOR KEY SHARE (Weakest Lock)</p> </li> <li> <p>Locking Options</p> </li> <li>NOWAIT : Fails immediately if lock cannot be acquired</li> <li>SKIP LOCKED :  Skips already locked rows</li> </ul> <pre><code>BEGIN;\nSELECT * FROM accounts WHERE id = 1 FOR UPDATE;\n-- The row is now locked for updates by other transactions\nUPDATE accounts SET balance = balance - 100 WHERE id = 1;\nCOMMIT;\n\nBEGIN;\nSELECT * FROM accounts WHERE id = 1 FOR SHARE;\n-- Other transactions can read but cannot update this row\nCOMMIT;\n\nBEGIN;\nSELECT * FROM customers WHERE id = 1 FOR NO KEY UPDATE;\n-- Locks row but allows updates on non-key columns\nCOMMIT;\n\nBEGIN;\nSELECT * FROM orders WHERE id = 1 FOR KEY SHARE;\n-- Only prevents key changes\nCOMMIT;\n</code></pre>"},{"location":"00_Springboot/03_data-layer/03_ACID%2BLocks/#table-level-lock","title":"table level lock","text":"<p><pre><code>BEGIN;\nLOCK TABLE accounts IN ACCESS EXCLUSIVE MODE;\n-- Prevents all access to the table\nCOMMIT;\n</code></pre> - more(extra)   - ACCESS SHARE - Weakest lock, acquired automatically by SELECT queries (only conflicts with ACCESS EXCLUSIVE).   - ROW SHARE - Acquired by SELECT FOR SHARE, allows concurrent reads but blocks exclusive writes.   - ROW EXCLUSIVE - Acquired automatically by UPDATE/DELETE/INSERT (blocks SHARE, SHARE ROW EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE).   - SHARE UPDATE EXCLUSIVE - Used by VACUUM/ANALYZE, blocks same mode and stronger (except ACCESS SHARE).   - SHARE - Acquired by CREATE INDEX, allows concurrent reads but blocks all writes (conflicts with ROW EXCLUSIVE and stronger).   - SHARE ROW EXCLUSIVE - Rarely used explicitly, blocks SHARE and same mode.   - EXCLUSIVE - Blocks all concurrent writes and SHARE locks (only allows ACCESS SHARE reads).   - ACCESS EXCLUSIVE - Strongest lock, acquired by ALTER TABLE/DROP TABLE, blocks all operations</p>"},{"location":"00_Springboot/03_data-layer/03_ACID%2BLocks/#pg_lock-monitor","title":"pg_lock (Monitor)","text":"<pre><code>SELECT locktype, relation::regclass, mode, pid\nFROM pg_locks\nWHERE relation = 'accounts'::regclass;\n</code></pre>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-1-anno%2Bconverter/","title":"Hibernate Annotations & Converter","text":""},{"location":"00_Springboot/03_data-layer/04_Hibernate-1-anno%2Bconverter/#-anno-httpschatgptcomc1375c062-4b67-437d-860b-e065a2980f57","title":"- anno : - https://chatgpt.com/c/1375c062-4b67-437d-860b-e065a2980f57","text":""},{"location":"00_Springboot/03_data-layer/04_Hibernate-1-anno%2Bconverter/#hibernate","title":"Hibernate","text":""},{"location":"00_Springboot/03_data-layer/04_Hibernate-1-anno%2Bconverter/#annotation","title":"Annotation","text":""},{"location":"00_Springboot/03_data-layer/04_Hibernate-1-anno%2Bconverter/#common-annotation","title":"Common Annotation","text":"<ul> <li><code>@Entity</code>(name=\"new_entityname\"),  @version feild</li> <li><code>@Basic</code>(fetch=FetchType.EAGER,optional=true).<ul> <li>this is already added by default on all column.</li> <li>basic mapping, field to a db column.</li> </ul> </li> <li><code>@Table</code>(name=\"new_tablename\") </li> <li><code>@Column</code>(name=\"new_colname\", updateble=f/t), more <ul> <li>Lenght=255, string-valued column length. / @Length</li> <li>Precision and Scale. for decimal feild.</li> </ul> </li> <li><code>@Transient</code></li> </ul>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-1-anno%2Bconverter/#relationship","title":"relationship","text":"<ul> <li>@OneToOne, </li> <li>@OneToMany,  @ManyToOne, </li> <li><code>@JoinTable and @JoinColumn()</code></li> <li><code>@OrderBy(\"colInManySide ASC\")</code> Sorting Children within Each Parent</li> <li> <p><code>@Fetch @batchSize</code> - use together in relation : 1-2-M,etc</p> </li> <li> <p>@ManyToMany : Add FK and create JoinTable bts.</p> </li> <li><code>@WhereJoinTable(clause = \"columnInJoinTable='value-1'\")</code></li> </ul>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-1-anno%2Bconverter/#identifier","title":"identifier","text":"<ul> <li>@embeddedId</li> <li>@Id</li> <li>@GeneratedValue() <code>@TableGenerator</code>()</li> <li>@GeneratedValue() <code>@SequenceGenerator</code>()</li> <li>@GeneratedValue() <code>@GenericGenerator</code>()</li> <li>check more: 04_Hibernate-2-identifier+validator.md</li> </ul>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-1-anno%2Bconverter/#inheritance","title":"Inheritance","text":"<ul> <li><code>@MappedSuperclass</code> on parent class</li> <li><code>@Inheritance(strategy = InheritanceType.SINGLE_TABLE)</code> : on parentClass</li> <li><code>@DiscriminatorColumn(name=\"columnName\",discriminatorType = DiscriminatorType.INTEGER)</code> : on parentClass</li> <li><code>@DiscriminatorValue(\"1\")</code> : on ChildClass</li> </ul>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-1-anno%2Bconverter/#performance","title":"Performance","text":"<ul> <li>q.setFetchSize(10)</li> <li>@BatchSize(size = 20) at Entity level for All operations.</li> <li>custom code to achieve batch behaviour :</li> <li>for loop &gt;&gt; on iteration 20, perform flush amd clear em/session.</li> <li>Small Fetch Size: May lead to more frequent database calls, increasing network latency and overhead.</li> <li>Large Fetch Size: Reduces the number of database calls but consumes more memory as more rows are loaded into memory at once.</li> <li><code>@BatchSize</code> on Entity level</li> <li>option for relation/many-side:</li> <li> <p><code>@Fetch</code> </p> <ul> <li>(FetchMode.SELECT) : https://chatgpt.com/c/1375c062-4b67-437d-860b-e065a2980f57</li> <li>fetch associated entities lazily, to avoid loading unnecessary data upfront.</li> <li>optimizing performance when dealing with large collections.</li> <li>(FetchMode.Join) : load early</li> </ul> </li> <li> <p><code>@BatchSize</code> </p> <ul> <li>Use along with @Fetch.</li> <li>@OneToMany(mappedBy = \"order\")  @BatchSize(size = 10) private List items;  <li>optimize the loading of collections.</li> <li>instead of issuing separate SELECT queries for each item, Hibernate will fetch 10 items at a time, reducing the number of queries executed.</li> <li>but may increase memory usage, if batch size is big.</li> <li> <p>@OneToMany(<code>fetch</code> = FetchType.LAZY/EAGER), etc</p> </li> <li>@Basic(fetch=FetchType.EAGER)</li>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-1-anno%2Bconverter/#convertor-rarely-used","title":"Convertor (rarely used)","text":"<ul> <li><code>@Convert (converter=abc.class)</code> </li> <li>more like binder - which jackson for JSON&lt;--&gt;Object(DTO)</li> <li>converter for DB::table&lt;--&gt;Object(Entity)</li> <li>use case : performing encryption/decryption, data transformations, that are NOT directly supported by JPA, etc</li> <li>implement AttributeConverter , override:<ul> <li>dbType convertToDatabaseColumn(entityType)</li> <li>entityType convertToEntityAttribute(dbType)</li> </ul> <li><code>@Lob</code> byte[]</li> <li><code>@Temporal(TemporalType.DATE)</code> private Date birthDate;</li> <li>temporal, meaning relating to time.</li> <li>java has seperate set of API(Java.sql.*), to deal with DB Date/time eg: connection code, etc</li> <li><code>java.util.*</code> and <code>java.time.*</code>  &lt;--convert--&gt;  <code>Java.sql.*</code></li> <li><code>@Enumerated</code>(EnumType.STRING/ORDINAL) MyEnum</li> <li>enums to their ordinal values or names</li> <li>hibernate automatically converts to enum value, if not mentioned.</li> <li>Automatic/inbuilt conversion by Hibernate :</li> <li>Boolean to int (t-1, f-0)</li> <li>Boolean to String(t-\"true\")</li> <li>java.time.LocalDate to java.sql.Date  &lt;&lt;&lt;</li> <li>java.time.LocalDateTime to java.sql.Timestamp &lt;&lt;&lt;</li> <li>enum to string/ordinal. String/int var1</li>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-1-anno%2Bconverter/#other","title":"Other","text":"<ul> <li><code>@embedded and @embeddable</code></li> <li>define a class whose instances can be embedded in an entity. </li> <li>This class does not have its own table but shares the table of the owning entity.</li> <li>@Embedded @AttributeOverrides : use to override columnName whiling embedding   <pre><code>@Embedded  \n@AttributeOverrides({\n      @AttributeOverride(name = \"street\", column = @Column(name = \"home_street\")),\n      @AttributeOverride(name = \"city\", column = @Column(name = \"home_city\")), ...\n  })\n</code></pre></li> <li><code>@SqlResultSetMapping</code> : Map @NamedNativeQuery result to target(Entity/Tuple)</li> </ul>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-1-anno%2Bconverter/#annotation-from-sb-jpa-data-starter","title":"Annotation from SB-Jpa-Data-starter","text":"<ul> <li><code>@EnableTransactionManagement</code></li> <li><code>@Transactional</code></li> <li><code>@Query</code> + <code>@Param</code></li> <li><code>@QueryHints</code>({@QueryHint(name = \"org.hibernate.fetchSize\", value = \"10\")})</li> </ul> <ul> <li>pending</li> <li>program on inheritance</li> <li>program on relationship</li> </ul>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-2-identifier%2Bvalidator/","title":"Hibernate","text":""},{"location":"00_Springboot/03_data-layer/04_Hibernate-2-identifier%2Bvalidator/#identifier-strategies","title":"Identifier : strategies","text":"<ul> <li><code>@GeneratedValue(Strategy = GenerationType.\"XXXXX\")</code></li> </ul>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-2-identifier%2Bvalidator/#auto","title":"AUTO","text":"<ul> <li>hibernate will choose automatically, based on dialect.</li> <li>Oracle, PostgreSQL    : Uses <code>SEQUENCE</code> because Oracle supports sequences.</li> <li>MySQL, SQL Server, H2 : Uses <code>IDENTITY</code> because MySQL supports auto-increment columns.</li> </ul>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-2-identifier%2Bvalidator/#identity","title":"IDENTITY :","text":"<ul> <li><code>Auto-increment</code>, can apply on Number types.</li> </ul>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-2-identifier%2Bvalidator/#table","title":"TABLE","text":"<ul> <li><code>@GeneratedValue () @TableGenerator()</code> </li> <li>less common, PK is generated using a \"table\" that holds a set of unique keys.   <pre><code>CREATE TABLE ID_GEN (\n    GEN_NAME VARCHAR(255) NOT NULL,\n    GEN_VALUE BIGINT NOT NULL,\n    PRIMARY KEY (GEN_NAME)\n);\n\n@Id\n@GeneratedValue(strategy = GenerationType.TABLE, generator = \"my_table_generator\")  &lt;&lt;&lt;\n@TableGenerator(\nname                = \"my_table_generator\", \ntable               = \"ID_GEN\",\npkColumnName        = \"GEN_NAME\",\nvalueColumnName     = \"GEN_VALUE\",\npkColumnValue       = \"MY_ID_GEN_1\",\nallocationSize      = 1 \n)\nprivate Long id;\n\n- SELECT GEN_VALUE FROM ID_GEN WHERE GEN_NAME = 'MY_ID_GEN_1';\n- UPDATE ID_GEN SET GEN_VALUE = GEN_VALUE + 1 WHERE GEN_NAME = 'MY_ID_GEN_1';\n</code></pre></li> </ul>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-2-identifier%2Bvalidator/#sequence","title":"SEQUENCE","text":"<ul> <li><code>@GeneratedValue @SequenceGenerator</code> :    <pre><code>CREATE SEQUENCE MY_SEQUENCE START WITH 1 INCREMENT BY 1;             &lt;&lt;&lt; \n\n@Id\n@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"my_sequence\")\n@SequenceGenerator(name = \"my_sequence\", sequenceName = \"MY_SEQUENCE\", allocationSize = 1)\nprivate Long id;\n\nallocationSize -  number of sequence values to allocate at a time\n</code></pre></li> </ul>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-2-identifier%2Bvalidator/#generic-uuidguid","title":"GENERIC -  UUID/GUID","text":"<ul> <li><code>@GeneratedValue()  @GenericGenerator()</code> - from hibernate</li> <li>Random Sequence, avoid predictable sequences for security.</li> <li>fact:  Random values can lead to fragmented indexes, which can affect performance.</li> <li>UUID/GUID </li> <li>128 bit - globally unique</li> <li>eg: <code>550e8400-e29b-41d4-a716-446655440000</code></li> <li>32 char,string, group of 5 by Hypen.</li> <li>incorporate TimeStamp and hardware info.</li> <li>use-case : DB:Pk, DistributedSystem, registry keys, etc</li> <li>eg:</li> <li>org.hibernate.id.UUIDGenerator    <pre><code>    @GeneratedValue( generator = \"myUUID\")\n    @GenericGenerator(name = \"myUUID\", strategy = \"org.hibernate.id.UUIDGenerator\")\n</code></pre></li> <li> <p>create own:   CustomIdentifier.java <pre><code>public class CustomIdentifier implements IdentifierGenerator {\n  @Override\n  public Object generate(SharedSessionContractImplementor sharedSessionContractImplementor, Object o) {\n      return UUID.randomUUID();\n  }\n}            \n\n@Id\n@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"generic-1\")\n@GenericGenerator(name = \"generic-1\", strategy = \"CustomIdentifier\")\nprivate Long id;\n</code></pre></p> </li> <li> <p>NanoID</p> </li> <li>unique IDs that are shorter and more URL-friendly.</li> <li> <p>eg: <code>DqQrAcB9jK</code></p> </li> <li> <p>TimestampId <pre><code>    @Override\n    public Serializable generate(SharedSessionContractImplementor session, Object object) {\n        long timestamp = System.currentTimeMillis();\n        int random = new Random().nextInt(999999);\n        return timestamp + \"-\" + random;\n    }\n</code></pre></p> </li> <li>Composite Identifiers</li> <li>https://www.baeldung.com/hibernate-identifiers</li> <li>@Embeddable Class ABC : Also public no-agr const, define equal and hashcode</li> <li>then inject <code>@EmbeddedId</code> ABC id;</li> </ul>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-2-identifier%2Bvalidator/#d-validator","title":"D. Validator","text":"<ul> <li>spring-boot-starter-validation</li> <li>@Min / @Max / @DecimalMin/MAX / @Range- on numbetypes</li> <li>@Size(min = 3, max = 15) : on String</li> <li>@length(min = 3, max = 15) : on Collection</li> <li>@Null/ @NotNull / @NotEmpty / @NotBlank</li> <li>@AssertTrue / @AssertFalse</li> <li>@Pattern(regexp = \"^[0-9]{10}$\") String phoneNo</li> <li>Date:</li> <li>@Past</li> <li>@PastOrPresent</li> <li>@Future</li> <li>@FutureOrPresent</li> <li>More (H-specific) : @URL, @email, @CreditCardNumber, @Currency, @UUID</li> <li> </li> <li>create custom Annotation1 and annotate with <code>@Constraint(validatedBy = Validator1.class)</code></li> <li>class Validator1 implements <code>ConstraintValidator</code> // string:: TypeOfvalueBeingValidate  <li>Apply @Annotation1</li>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-2-identifier%2Bvalidator/#custom-validator","title":"Custom validator:","text":""},{"location":"00_Springboot/03_data-layer/04_Hibernate-3-query/","title":"Hibernate Query","text":"<ul> <li>NamedQuery :https://www.baeldung.com/hibernate-named-query</li> <li>Polymorphic queries : https://chatgpt.com/c/1375c062-4b67-437d-860b-e065a2980f57</li> <li>@SqlResultSetMapping : https://chatgpt.com/c/7a6449ba-dede-478f-9778-1c7a9a5d5d9d</li> </ul>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-3-query/#hibernate","title":"hibernate","text":""},{"location":"00_Springboot/03_data-layer/04_Hibernate-3-query/#a-query","title":"A. Query","text":"<ul> <li>parent class : Query <li>children     : TypeQuery, NamedQuery, NamedNativeQuery"},{"location":"00_Springboot/03_data-layer/04_Hibernate-3-query/#typedquery","title":"TypedQuery <ul> <li>T = ResultType</li> <li>It ensures that the query result matches a specific type, at compile time. <pre><code>TypedQuery&lt;Employee&gt; query = em.createQuery(\"SELECT e FROM Employee e WHERE e.department = :dept\", Employee.class);\nquery.setParameter(\"dept\", \"IT\");\nList&lt;Employee&gt; employees = query.getResultList();\nEmployee employee = query.getSingleResult();\n</code></pre></li> <li>never used.</li> </ul>","text":""},{"location":"00_Springboot/03_data-layer/04_Hibernate-3-query/#namedquery-hql-namednativequery-sql","title":"NamedQuery (hql) / NamedNativeQuery (sql) <ul> <li>SB-JPA-DATA repository uses these BTS for <code>@Query</code></li> <li>also follows result typing.</li> <li>centralized, Pre-validated queries, refer them by name and reuse it.</li> <li>use unique name in PC to avoid collision.</li> <li>prefer NamedQuery, use NamedNativeQuery only if certain feature not support by JPQL, and need DB specific optimization, etc <pre><code>#==============\n# 1 : Define\n#==============\n\n@NamedQuery(name = query-1,  query='static HQL/SQL')\n@Entity / @mappedSuperClass\nclass Entity {\n\n}\n  - more attribute:\n    - timeout = 1, \n    - fetchSize = 10, \n    - cacheable=t/f,  \n    - resultClass = Result.class\n\n#==============\n# 2 : use it\n#==============\n\nQuery&lt;Result&gt; q = session.createNamedQuery(\"query-1\", Result.class)\nq.setparameter(k,v)\n\nq.getSingleResult();\nq.getResultList()/Set();\n</code></pre></li> </ul>","text":""},{"location":"00_Springboot/03_data-layer/04_Hibernate-3-query/#result-to-custom-classtuple","title":"Result to custom-class/Tuple <ul> <li>reference:  https://chatgpt.com/c/7a6449ba-dede-478f-9778-1c7a9a5d5d9d</li> <li>way-1: @NamedNativeQuery(...,  resultClass = Result.class) <pre><code>@NamedNativeQuery(\n    name = \"Employee.findSummary\",\n    query = \"SELECT id, name, department FROM employee\",\n    resultClass = Result.class\n\n    # keep names in sync b/w query and result class           \n)\n\nList&lt;Employee&gt; employees = entityManager.createNamedQuery(\"Employee.findAll\", Employee.class).getResultList();\n</code></pre></li> <li>way-2: @SqlResultSetMapping (name=Mapping_1, ...) + @NamedNativeQuery(...)</li> </ul> <p><pre><code>@SqlResultSetMapping(\n    name = \"EmployeeDTOResult\",\n    classes = @ConstructorResult(\n        targetClass = EmployeeDTO.class,\n        columns = {\n            @ColumnResult(name = \"id\", type = Long.class),\n            @ColumnResult(name = \"name\", type = String.class),\n            @ColumnResult(name = \"department\", type = String.class)\n        }\n    )\n)\n\n@NamedNativeQuery(\n    name = \"Employee.findSummary\",\n    query = \"SELECT id, name, department FROM employee\",\n    resultClass = Result.class,            \n    resultSetMapping = \"Mapping_1\"         \n)\n\nList&lt;EmployeeDTO&gt; employees = entityManager.createNamedQuery(\"Employee.findSummary\").getResultList();\n</code></pre> - WAY-3 : tuple **  <pre><code>@NamedNativeQuery(\n    name = \"Employee.findSummary\",\n    query = \"SELECT id, name, department FROM employee\"\n)\n\nList&lt;Tuple&gt; results = entityManager.createNamedQuery(\"Employee.findSummary\", Tuple.class).getResultList();    &lt;&lt;&lt;\n\nfor (Tuple tuple : results) {\n    Long id = tuple.get(\"id\", Long.class);\n    String name = tuple.get(\"name\", String.class);\n    String department = tuple.get(\"department\", String.class);\n    System.out.println(\"id: \" + id + \", name: \" + name + \", department: \" + department);\n}\n</code></pre></p>","text":""},{"location":"00_Springboot/03_data-layer/04_Hibernate-3-query/#result-mapping-more","title":"Result mapping : more <ol> <li>Tuple (more like Object[],hetrogeneous)<ul> <li>use Tuple / List : for single ot mutlipe result <li>add javatuples<ul> <li>Im-mutable : Pair, triplet - hence maintain data integrity.</li> </ul> </li>   <li>class MyClass implements ResultTransformer :<ul> <li>First @override transformTuple(,)</li> <li>then use it on any query , q.setResultTransformer(RT rt)</li> <li>inbuilt ResultTransformer.<ul> <li>Transformers.TO_ARRAY</li> <li>Transformers.TO_LIST</li> <li>Transformers.ALIAS_TO_ENTITY_CLASS</li> </ul> </li> </ul> </li>","text":""},{"location":"00_Springboot/03_data-layer/04_Hibernate-3-query/#b-pagination-query-result","title":"B. Pagination (query result)","text":"<pre><code>int pageNumber = 1;\nint pageSize = 10; \nq.setFirstResult((pageNumber-1) * pageSize);  //offset \nq.setMaxResults(pageSize);                    // Limit\nq.getResultList();\n</code></pre> <ul> <li>Another way (old): get ids and then sublist ids <pre><code>    //STEP-1 : sort ids as well / gives total count.\n    Query q = entityManager.createQuery(\"Select f.id from Foo f order by f.id\");\n    List&lt;Integer&gt; ids = q.getResultList();\n\n    //STEP-2\n    Query query = entityManager.createQuery(\"Select f from Foo e where f.id in :ids\");\n    query.setParameter(\"ids\", fooIds.subList(0,10));\n    List&lt;Foo&gt; fooList = query.getResultList();\n</code></pre></li> </ul>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-3-query/#c-scrollableresults-query-result","title":"C. ScrollableResults (query result)","text":"<ul> <li>hibernate feature that allows iterating through query results in a memory-efficient way.</li> <li>instead of loading all rows into memory, it fetches rows in batches, making it suitable for processing large datasets.</li> <li>q.scroll() <pre><code>ScrollableResults resultScroll = query.scroll(ScrollMode.FORWARD_ONLY);\nquery.setFetchSize(10);\nwhile (scrollableResults.next()) {\n     Employee employee = (Employee) scrollableResults.get(0);\n}\n\n# more navigation method: \n\nnext(): Move the cursor to the next row.\nprevious(): Move the cursor to the previous row.\nfirst(): Move the cursor to the first row.\nlast(): Move the cursor to the last row.\nscroll(int positions): Move the cursor by a specific number of rows (positive for forward, negative for backward).\nsetRowNumber(int rowNumber): Jump to a specific row by its number\n</code></pre></li> </ul>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-3-query/#d-polymorphic-queries","title":"D. Polymorphic queries","text":"<ul> <li>implicitly : query for parent-entity, automatically includes ALL child records --&gt; 6 records.</li> <li>explicitly : use Treat, to change this behaviour.</li> <li>open and search : https://chatgpt.com/c/1375c062-4b67-437d-860b-e065a2980f57</li> <li>check below queries: <pre><code>List&lt;Vehicle&gt; vehicles = session.createQuery(\"FROM Vehicle\", Vehicle.class).getResultList();\n// Implicit polymorphism: vehicles list will contain instances of both Car and Bike\n\nList&lt;Car&gt; cars = session.createQuery(\"FROM Car\", Car.class).getResultList();\n// Explicit polymorphism: cars list will contain only instances of Car\n\nList&lt;Vehicle&gt; vehicles = session.createQuery(\"FROM Vehicle v WHERE TREAT(v AS Car).numberOfDoors &gt; 3\", Vehicle.class) .getResultList();  &lt;&lt;&lt;\n</code></pre></li> </ul>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-3-query/#e-hql","title":"E. HQL","text":""},{"location":"00_Springboot/03_data-layer/04_Hibernate-3-query/#joins","title":"joins <ul> <li>INNER : JOIN, </li> <li>OUTER : (LEFT JOIN / RIGHT JOIN)</li> <li>FETCH JOIN  : load associated entities eagerly</li> <li>fact: </li> <li>since relation is already defined with 121,12M, M2M, etc. FK/common col already  added. </li> <li>hence dont need to explicitly define ON-condition with Join.</li> <li><code>@Query(\"SELECT e, d FROM Employee e JOIN Department d ON e.department.id = d.id AND d.name = :departmentName\")     List&lt;Object[]&gt; findEmployeesByDepartmentName(@Param(\"departmentName\") String departmentName);</code></li> <li>https://chatgpt.com/c/1375c062-4b67-437d-860b-e065a2980f57</li> </ul>","text":""},{"location":"00_Springboot/03_data-layer/04_Hibernate-3-query/#static-queries","title":"STATIC queries <ul> <li>JPQL and Native-SQL</li> <li>JPQL take advantage of OOP of entity class.</li> <li>Positional parameters ?1,2,etc vs named parameters (preferred)</li> <li>Sorting :: order by  e.feild1, e.feild2</li> <li>sorting entities in a 1-2-M relation, meaning list on many side <code>@OrderBy(\"childName ASC\")</code> List children. // Parent has many Children <li>Sorting : in JPQL/HQPL itself :  NULLS LAST, NULLS FIRST at the end.</li> <li>Sorting Query Results with Spring Data : https://www.baeldung.com/spring-data-sorting#sorting-with-spring-data</li>","text":""},{"location":"00_Springboot/03_data-layer/04_Hibernate-3-query/#dynamic-criteria-api","title":"DYNAMIC : Criteria API <ul> <li>pending / skip</li> </ul>","text":""},{"location":"00_Springboot/03_data-layer/04_Hibernate-3-query/#f-batch-processing-in-progress","title":"F Batch  processing <code>in-progress</code>","text":"<ul> <li>Custom batch code. for&gt;flush/clear after 20.</li> <li><code>hibernate.jdbc.batch_size</code>=20</li> <li><code>spring.jpa.properties.hibernate.jdbc.batch_size</code>=20</li> <li>@BatchSize(size = 20) at Entity level for all Operations (CRUD)</li> <li>fact:@GeneratedValue(strategy = GenerationType.IDENTITY ) will disable batch-INSERT Silently. USE SEQUENCE.</li> </ul>"},{"location":"00_Springboot/03_data-layer/04_Hibernate-3-query/#zpending","title":"Z.Pending:","text":"<ol> <li>TransactionTemplate prg</li> <li>ScrollableResults program - when processing large dataset, (not sending large Dataset in batches to UI)</li> <li>Query Plan Cache</li> <li>@NamedQuery More attribute</li> <li>cacheMode=GET, IGNORE, NORMAL, PUT, or REFRESH</li> <li>flushMode=ALWAYS, AUTO, COMMIT, MANUAL, or PERSISTENCE_CONTEXT</li> </ol>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-1-start/","title":"SB JPA Data Part 1","text":"<ul> <li>reference:</li> <li>https://www.baeldung.com/persistence-with-spring-series</li> <li>https://www.baeldung.com/multitenancy-with-spring-data-jpa</li> <li>DB-06-SpringJpaData-1 : https://chatgpt.com/c/a874b751-9880-4225-a96c-9052773037fa</li> <li>DB-06-SpringJpaData-2 : https://chatgpt.com/c/8ace7914-f8cc-465e-873a-7b45974bb7b2</li> <li>DB-06-SpringJpaData-3 : https://chat.openai.com/c/7b6dd03e-ca98-44d5-87a6-73c23026a009</li> <li>DB-06-SpringJpaData-4 : https://chatgpt.com/c/8cdd30bb-cd6e-42dc-bb27-43e5235c8a68<ul> <li>spring-data-jpa-projections </li> </ul> </li> </ul>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-1-start/#springboot-jpa-data","title":"SpringBoot JPA Data","text":""},{"location":"00_Springboot/03_data-layer/05-SBjpaData-1-start/#a-intro","title":"A Intro","text":"<ul> <li>Provide Abstractions.</li> <li>@PersistenceContext - txn-scoped.</li> <li>AC - 3 bean - datasource, EMfactory/Sessionfactory, TxnManager.</li> <li>@Transactional</li> <li>Create Reliable transaction with ACID.</li> <li>provides abstraction, no to write start and commit/rollback.</li> <li>ACID (reliable transaction)</li> <li>A tomicity : SB - @Transactional</li> <li>C onsistency : underlying DB sol - constraints, Fk, etc</li> <li>I solated : underlying DB sol. <code>@Transactional(isolation=\"choose one\") / Optimistic concurrency control</code><ul> <li>RU(no concurrency - All 3 problem : dirty read, phantom, RR )</li> <li>RC (dirty fixed, but still - phantom, RR)</li> <li>Non-R (dirty fixed, non-R fixed, but still phantom)</li> <li>Serializable ( All fixed )</li> <li>D urable : underlying DB sol - permanent after commit.</li> </ul> </li> </ul>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-1-start/#more","title":"more","text":"<ul> <li>spring.sql.init.mode = never</li> <li>always</li> <li>never</li> <li>fallback : Initialize the database using scripts if no schema is detected.</li> <li>enable logging:</li> <li>logging.level.org.springframework.transaction=DEBUG</li> <li>logging.level.org.springframework.orm.jpa.JpaTransactionManager=DEBUG</li> </ul>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-1-start/#testing","title":"testing","text":""},{"location":"00_Springboot/03_data-layer/05-SBjpaData-1-start/#sql","title":"@Sql","text":"<ul> <li>define SQL scripts to be executed before or after a test method.</li> <li>define at class or method level. <pre><code>@SpringBootTest\n\npublic class MyRepositoryTests {\n\n    @Autowired\n    private MyRepository myRepository;\n\n    @Test\n    @Sql({\"/schema_2.sql\", \"/dat_2.sql\"})\n    public void testFindAll() {\n        List&lt;MyEntity&gt; entities = myRepository.findAll();\n        // Assertions or other test logic\n    }\n}\n</code></pre></li> </ul>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-1-start/#sqlconfig","title":"@SqlConfig","text":"<ul> <li>used to configure the behavior of SQL scripts that are executed during integration tests using the @Sql <pre><code>@Sql({\"/schema.sql\", \"/data.sql\"})\n@SqlConfig(\n  dataSource         = \"myDataSource\", \n  transactionManager = \"myTransactionManager\")\n</code></pre></li> </ul>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-2/","title":"persistence-with-springBoot","text":""},{"location":"00_Springboot/03_data-layer/05-SBjpaData-2/#a-annotations","title":"A. Annotations","text":"<ul> <li>data.sql, schema.sql, JPA-buddy-PlugIn</li> <li><code>@EnableJpaRepositories</code>(\"example.baeldung.com.repo\")</li> <li><code>@EntityScan</code>(\"example.baeldung.com.entity\")</li> <li><code>@EnableTransactionManagement</code> </li> <li><code>@Transactional</code></li> <li><code>@Query</code> - if having indexed/named parameter then bind using <code>@Param</code> on arg.</li> <li><code>@Modifying</code></li> <li>method should run inside Transaction </li> <li>method returns - int,void</li> <li>annotation indicates that the method modifies the state of the database.</li> <li>testing : @Sql, @SqlConfig, @SqlGroup - </li> </ul>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-2/#b-multiple-datasource","title":"B. Multiple DataSource :","text":"<ul> <li>DBP_01_Multiple Data Sources : https://chatgpt.com/c/7c2da8f5-3f44-4e71-b4f9-4cdadacf0ec5</li> <li>Create 2 beans - Ds1() and Ds2(), Apply ConfigurationProperties on method -&gt; binds returnType(DataSource).</li> <li>create 2 beans - emF1 , emF2</li> <li>Create 2 beans - Txm1 , Txm2</li> <li>Create 2 sets of entities and repos:<ul> <li>package1 : entities1, repos1, : use Datasource1 </li> <li>package2 : entities2, repos2  : Use Datasource2. how, see below ?</li> </ul> </li> <li><code>@EnableJpaRepositories(        basePackages = \"dao1/repos1/*\",         entityManagerFactoryRef = \"emF1\",         transactionManagerRef = \"txn1\"     )     // same for another set</code></li> </ul>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-2/#c-spring-jpa-data","title":"C. Spring JPA Data","text":"<ul> <li>Purpose</li> <li>DAO/persistence layer usually consists of a lot of boilerplate code (CRUD methods, wire em, etc)</li> <li>SJD makes it possible to remove the DAO implementations entirely.</li> <li>find this interface and automatically create an implementation for it.</li> <li>Exception </li> <li>translation is still enabled by the use of the <code>@Repository</code>.</li> <li>All DB exception converts/translated to DataAccessException hierachy</li> <li>custom translator:   <pre><code># 1\npublic class Custom_PersistenceExceptionTranslator implements PersistenceExceptionTranslator \n{\n  @Override\n  public DataAccessException translateExceptionIfPossible(RuntimeException ex) {\n      ...\n  }\n}\n\n# 2\n@Configuration\nPublic class AppConfig {\n  @Bean\n  public PersistenceExceptionTranslator exceptionTranslator() {\n      return new Custom_PersistenceExceptionTranslator();\n  }}\n</code></pre></li> </ul>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-2/#repository","title":"Repository","text":""},{"location":"00_Springboot/03_data-layer/05-SBjpaData-2/#1-crudrepositoryeid","title":"1. <code>CrudRepository&lt;E,ID&gt;</code>","text":"<ul> <li>returns <code>Iterable&lt;E&gt;</code> </li> <li>ListCrudRepository --&gt; returns <code>List&lt;E&gt;</code> <pre><code>    &lt;S extends T&gt; S save(S entity);\n    T findOne(ID primaryKey);\n    Iterable&lt;T&gt; findAll();\n    Long count();\n    void delete(T entity);\n    boolean exists(ID primaryKey);\n</code></pre>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-2/#2-pagingandsortingrepositoryeid","title":"2. <code>PagingAndSortingRepository&lt;E,ID&gt;</code>","text":"<pre><code>     Iterable&lt;T&gt; findAll(Sort sort);\n     Page&lt;T&gt; findAll(Pageable pageable);\n</code></pre>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-2/#3-jparepositoryeid","title":"3. <code>JpaRepository&lt;E,ID&gt;</code>","text":""},{"location":"00_Springboot/03_data-layer/05-SBjpaData-2/#4-custom-repo","title":"4. Custom repo","text":"<ul> <li>own interface and impl class</li> </ul>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-2/#5-composite-repo","title":"5. Composite repo","text":"<ul> <li>mix of above (each is called <code>fragments</code> then). eg: <pre><code># 1\npublic interface ProductRepository extends CrudRepository&lt;Product, Long&gt; { }\n\n# 2\npublic interface ProductPagingAndSortingRepository extends PagingAndSortingRepository&lt;Product, Long&gt; {}\n\n# 3\npublic interface CustomProductRepository {\n    List&lt;Product&gt; findByCustomCriteria(String criteria);\n}\npublic class CustomProductRepositoryImpl implements CustomProductRepository {\n    @PersistenceContext\n    private EntityManager entityManager;\n\n    @Override\n    public List&lt;Product&gt; findByCustomCriteria(String criteria) {\n        String jpql = \"SELECT p FROM Product p WHERE p.name LIKE :criteria\";\n        return entityManager.createQuery(jpql, Product.class)\n                            .setParameter(\"criteria\", \"%\" + criteria + \"%\")\n                            .getResultList();\n    }\n}\n\nCombine the base repositories and custom repository into a single repository interface.    &lt;&lt;&lt; \n\n@Repository\npublic interface CompositeProductRepository extends \n        ProductRepository, \n        ProductPagingAndSortingRepository, \n        CustomProductRepository {\n}\n</code></pre></li> </ul>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-2/#d-queries","title":"D. Queries","text":""},{"location":"00_Springboot/03_data-layer/05-SBjpaData-2/#1-derive-methods","title":"1. Derive methods","text":"<ul> <li>methodName :: <code>&lt;introducer&gt; [distinct|Top|FIRST]+ \"By\" + &lt;criteria&gt; + \"OrderBy\"+propertyName () + Desc|Asc</code></li> <li><code>introducer</code> : find, read, query, count and get</li> <li><code>Criteria</code> :: </li> <li>propertyName + <code>Is|IsNot</code> (T v)</li> <li>propertyName + <code>IsNull|IsNotNull</code> (v)</li> <li>booleanPropertyName + <code>True|False</code> ()</li> <li>propertyName + <code>StartingWith</code> (String prefix)</li> <li>propertyName + <code>EndingWith</code> (String suffix)</li> <li>propertyName + <code>NameLike</code>(String likePattern);</li> <li>propertyName + <code>LessThan | LessThanEqual | GreaterThan | GreaterThanEqual | Between</code> (int...)</li> <li>propertyName + <code>In</code> (Collection c)</li> <li>propertyName + <code>After</code> (ZonedDateTime)</li> <li>propertyName + <code>Before</code> (ZonedDateTime)</li> </ul> <pre><code>List&lt;User&gt; findByNameIs(String name);\nList&lt;User&gt; findByNameEquals(String name);\nList&lt;User&gt; findByNameIsNot(String name);\nList&lt;User&gt; findByNameIsNull();\nList&lt;User&gt; findByNameIsNotNull();\n\nList&lt;User&gt; findByNameStartingWith(String prefix);\nList&lt;User&gt; findByNameStartingWith(String prefix);\nList&lt;User&gt; findByNameEndingWith(String suffix);\nList&lt;User&gt; findByNameContaining(String infix);\n\nList&lt;User&gt; findByAgeLessThan(Integer age);\nList&lt;User&gt; findByAgeLessThanEqual(Integer age);\nList&lt;User&gt; findByAgeGreaterThan(Integer age);\nList&lt;User&gt; findByAgeGreaterThanEqual(Integer age);\nList&lt;User&gt; findByAgeBetween(Integer startAge, Integer endAge);\n\nList&lt;User&gt; findByAgeIn(Collection&lt;Integer&gt; ages);\n\nList&lt;User&gt; findByBirthDateAfter(ZonedDateTime birthDate);\nList&lt;User&gt; findByBirthDateBefore(ZonedDateTime birthDate);\n</code></pre> <ul> <li>Grouping : And or (Not fan of it.)</li> <li>eg: List <code>findByNameOrAgeAndActiveCustom</code>(String name, Integer age, Boolean active);<ul> <li>possibility-1 : (name = 'John' OR age = 30) AND active = true</li> <li>possibility-2 : name = 'John' OR (age = 30 AND active = true)</li> <li>its better to use @Query then, to take control.</li> <li><code>@Query(\"SELECT u FROM User u WHERE u.name = ?1 OR (u.age = ?2 AND u.active = ?3)\")</code></li> </ul>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-2/#2-query","title":"2. @Query","text":"<ul> <li>notice:</li> <li>Sort</li> <li>Pageable</li> <li>Page <li>PageRequest.of() <pre><code>------------------------\n// orderby / sorting\n------------------------\nsort-object-1:\n  - Sort.by(\"name\")\n  - Sort.by(\"price\").descending()\n  - Sort.by(\"price\").descending().and(Sort.by(\"name\"))\n  - Sort.by(Sort.Direction.ASC, \"name\")\n\n@Query(value = \"JPQL\", nativeQuery = f)\n- List&lt;E&gt; l = repo.findAll(sort-object-1);\n\n------------------------\n// pagination\n------------------------\nPageable p = PageRequest.of(page_no, page_size, sort-object-1); // int, int, Sort\n\n@Query(value = \"JPQL\", nativeQuery = f)\n- Page&lt;E&gt; l = repo.findAll(Pageable pageable);\n\n@Query(value = \"SQL\", nativeQuery = True, countQuery = '..count(*)..')\n- Page&lt;E&gt; l = repo.findAll(Pageable pageable);\n\nPageable sortedByName =PageRequest.of(0, 3, Sort.by(\"name\"));\nPageable sortedByPriceDesc =  PageRequest.of(0, 3, Sort.by(\"price\").descending());\nPageable sortedByPriceDescNameAsc = PageRequest.of(0, 5, Sort.by(\"price\").descending().and(Sort.by(\"name\")));\n\n@Query(value = \"SELECT u FROM User u WHERE u.name IN :names\")\nList&lt;User&gt; findUserByNameList(@Param(\"names\") Collection&lt;String&gt; names);    \n</code></pre></li> <li>sample Page after json serialization: <pre><code>{\n  \"content\": [\n    {\n      \"id\": 1,\n      \"name\": \"John\",\n      \"email\": \"john@example.com\"\n    }\n  ],\n  \"pageable\": {\n    \"pageNumber\": 0,\n    \"pageSize\": 5\n  },\n  \"totalPages\": 10,\n  \"totalElements\": 50\n}\n</code></pre>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-2/#more","title":"More","text":"<ul> <li>JPA Buddy plugin </li> <li>generation of JPA entities, Spring Data JPA repositories, DTOs,</li> <li>initialization DDL scripts,</li> <li>Flyway versioned migrations,</li> <li>provides an advanced tool for reverse engineering.</li> </ul>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-3-txn/","title":"SB JPA Data Transactions","text":"<ul> <li>https://www.baeldung.com/transaction-configuration-with-jpa-and-spring - topics</li> </ul>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-3-txn/#hibernate-transaction-management","title":"Hibernate - Transaction management","text":"<ul> <li>add @Bean PlatformTransactionManager</li> <li>add @EnableTransactionManagement, or add spring-data-*-starter dependencies</li> <li>org.springframework.transaction = DEBUG</li> <li>fact:</li> <li>Mixing the database I/O with other types of I/O in a transactional context isn\u2019t a great idea.</li> </ul>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-3-txn/#a-transactional","title":"A. @Transactional","text":"<ul> <li>manage transaction boundaries in a declarative way.</li> <li>Spring creates proxies, to inject transactional-logic, before and after the running method.</li> <li>only public methods.</li> <li>best place apply on service method </li> <li>can also apply on repo methods</li> <li>@Transactional(attribtes=) : check below</li> </ul>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-3-txn/#propagation","title":"<code>propagation</code>","text":"<ul> <li>purpose:</li> <li>define the transactional behavior between multiple transactional methods.</li> <li>how the transaction management system handles existing and new transactions</li> <li>requires_new -&gt; AlwaysNewT </li> <li>If a transaction exists, the current method will join it</li> <li>If no transaction exists, a new one will be created.</li> <li>Required -&gt; t1 else t2new </li> <li>Suspends any existing transaction and starts a new one</li> <li>mandatory -&gt; t1 else ex </li> <li>Requires an existing transaction</li> <li> <p>If no transaction exists, an exception is thrown</p> </li> <li> <p>SUPPORTS -&gt; t1 </p> </li> <li>If a transaction exists, the method will participate in it.</li> <li>If no transaction exists, it will execute non-transactionally</li> <li>none  / NOT_SUPPORTED</li> <li>Suspends any existing transaction and executes non-transactionally.</li> <li>never -&gt;</li> <li>Must execute without a transaction</li> <li>Throws an exception if a transaction exists</li> <li>Nested</li> <li>inner txn :  independent transaction within the context of an existing/outer transaction.</li> <li>if inner transaction rolls back, it only rolls back the nested transaction, not the outer transaction.</li> <li>Not all databases and transaction managers provide full support for nested transactions.</li> <li>it uses Save points.</li> <li>enable it: <pre><code>  @Bean\n  public PlatformTransactionManager transactionManager(DataSource dataSource) \n  {\n    DataSourceTransactionManager transactionManager = new DataSourceTransactionManager(dataSource);\n    transactionManager.setNestedTransactionAllowed(true); // Enable nested transactions                   &lt;&lt;&lt; \n    return transactionManager;\n  }\n</code></pre></li> </ul>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-3-txn/#isolation","title":"<code>isolation</code>","text":"<ul> <li>txn side effect : Dirty-read, Non-repeatable read, Phantom read.</li> <li>protection levele: READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ and SERIALIZABLE.</li> <li>can check: 03_ACID.md</li> </ul>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-3-txn/#timeout","title":"<code>timeout</code>","text":""},{"location":"00_Springboot/03_data-layer/05-SBjpaData-3-txn/#readonly","title":"<code>readOnly</code>","text":"<p>\u2013 t/f  - just a hint for the persistence provider that the transaction should be read only.  - optimizes performance.</p>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-3-txn/#rollbackfor-norollbackfor","title":"<code>rollbackFor / noRollbackFor</code>","text":"<ul> <li>@Transactional(<code>rollbackFor</code> = {Exception.class, SpecificException.class})</li> <li>@Transactional(<code>rollbackForClassName</code> = {\"java.lang.Exception\", \"com.example.SpecificException\"})</li> <li>if we don't mention any rule, rollback happens on unchecked-exceptions/RuntimeException</li> </ul>"},{"location":"00_Springboot/03_data-layer/05-SBjpaData-3-txn/#b-programmatic-txn","title":"B. programmatic txn","text":""},{"location":"00_Springboot/03_data-layer/05-SBjpaData-3-txn/#intro","title":"intro","text":"<ul> <li>check StudentServiceImpl.java</li> <li>TransactionTemplate utility provided by Spring to programmatically manage transaction</li> <li>Amix with AOP</li> <li>open and search : https://chatgpt.com/c/7b6dd03e-ca98-44d5-87a6-73c23026a009</li> </ul>"},{"location":"00_Springboot/04_security/00_OAuth_2.0/","title":"OAuth 2.0","text":"<ul> <li>reference: </li> <li>okta : https://chatgpt.com/c/7db419de-fa44-4403-b587-a0e849b35ce8</li> <li> <p>my OAuth2 dev account : https://dev-16206041-admin.okta.com/admin/apps/active</p> </li> <li> <p>AWS OKTA SAML :</p> </li> <li>https://saml-doc.okta.com/SAML_Docs/How-to-Configure-SAML-2.0-for-Amazon-Web-Service</li> <li>https://help.okta.com/en-us/content/topics/deploymentguides/aws/aws-configure-aws-app.html</li> </ul>"},{"location":"00_Springboot/04_security/00_OAuth_2.0/#-oktaoauth2clientconfigurationjava","title":"- OktaOAuth2ClientConfiguration.java","text":""},{"location":"00_Springboot/04_security/00_OAuth_2.0/#pre-things","title":"pre-things","text":""},{"location":"00_Springboot/04_security/00_OAuth_2.0/#jwt","title":"JWT","text":"<ul> <li>body/payload : claims (statement about user and additional info)</li> </ul>"},{"location":"00_Springboot/04_security/00_OAuth_2.0/#application-arch","title":"Application arch","text":"<ul> <li>server-side web applications (SpringMVC, JSP) :</li> <li>browser-based applications / SPA :</li> <li>native/mobile apps :</li> <li>connected devices (M2M, lambda) :</li> </ul>"},{"location":"00_Springboot/04_security/00_OAuth_2.0/#openid-connect","title":"OpenId Connect","text":"<ul> <li>Token based Authentication.  <code>ID-Token</code></li> <li>extension over OAuth2.</li> </ul>"},{"location":"00_Springboot/04_security/00_OAuth_2.0/#oauth2","title":"OAuth2","text":""},{"location":"00_Springboot/04_security/00_OAuth_2.0/#intro","title":"Intro","text":"<ul> <li>http-redirection (header :: <code>location=url-2</code>, responseCode :: <code>302</code>)</li> <li>refer : https://auth0.com/intro-to-iam/what-is-oauth-2</li> <li> <p>Definition : OAuth standard protocol to solve <code>Delegated Authorization</code>.     &gt; - allow appl(Client) to access resources hosted by other web apps, on behalf of a user/resource-owner.     &gt; - provides consented access.     &gt; - restricts actions of what the client app can perform on resources, without sharing user credential.</p> </li> <li> <p>Token based Authorization. <code>Access-Token</code> + <code>Refresh Token</code> (long expiry )</p> </li> <li>Token based:</li> <li>format : JWT. </li> <li>token/s with multiple scope. (roles)</li> <li>received on callback URI</li> <li> <p>OAuth 2.0 doesn\u2019t define a specific format for Access Tokens</p> </li> <li> <p>client must identify/authenticate itself, when requesting an Access Token.</p> </li> <li>Resource server (spring-backend-app) </li> <li>must validate JWT </li> <li>has role-based access code.</li> </ul>"},{"location":"00_Springboot/04_security/00_OAuth_2.0/#key-components","title":"Key Components :","text":"<p>Eg: photoPrint-App &lt;--&gt; Google-Drive</p> <ul> <li>resource-Owner (User)</li> <li>Client</li> <li>resource-Server</li> <li>Authorization-Server</li> <li>more:</li> <li> <p>Scopes</p> <ul> <li>specify exactly the <code>reason</code>, for which access to resources may be granted.</li> <li>dependent on the Resource Server.</li> <li>while making Auth request mention <code>scopes</code>. eg: openid, profile, email, offline_access</li> <li>returned token will have <code>claims</code>.</li> </ul> </li> <li> <p>Authorization Code</p> <ul> <li>OAuth 2 Authorization server may not directly return an Access Token.</li> <li>Instead, and for better security, an Authorization Code may be returned, which is then exchanged for an Access Token.</li> </ul> </li> <li>Grant Types <ul> <li>grants are the <code>set of steps</code> a Client has to perform to get \"resource-access-authorization\".</li> <li>check below for detail.</li> </ul> </li> <li>claims<ul> <li>Registered claims:  iss (issuer), exp (expiration time), sub (subject), aud (audience),</li> <li>https://datatracker.ietf.org/doc/html/rfc7519#section-4.1</li> <li>public claims : https://www.iana.org/assignments/jwt/jwt.xhtml</li> <li>private claims :</li> </ul> </li> </ul>"},{"location":"00_Springboot/04_security/00_OAuth_2.0/#grant-types-flows","title":"Grant Types (flows)","text":"<ul> <li>grants are the \"set of steps\" a Client has to perform to get \"resource-access-authorization\".</li> </ul>"},{"location":"00_Springboot/04_security/00_OAuth_2.0/#authorization-code-grant-withwithout-pkce","title":"<code>Authorization Code</code> Grant  with/without PKCE","text":"<ul> <li>https://developer.okta.com/docs/guides/sign-into-web-app-redirect/spring-boot/main/</li> <li>After validating client identity,</li> <li>AuthServer return single-use Authorization-Code to the Client via callback URI</li> <li>which is then exchanged for an Access Token.</li> <li>use-case : Traditional web apps where the exchange can <code>securely</code> happen on the server side. // back-channel.</li> <li>PKCE : additional steps that make it more secure for mobile/native apps and SPAs. <pre><code>    1. Client : GET /authorize?response_type=code&amp;client_id=`CLIENT_ID`&amp;redirect_uri=`REDIRECT_URI`&amp;scope=read&amp;state=xyz\n    2. OKTA : HTTP/1.1 302 Found Location: https://client-app.com/callback?code=`AUTHORIZATION_CODE`&amp;state=xyz\n    3. Client : POST /token \n       Content-Type: application/x-www-form-urlencoded\n       grant_type=authorization_code&amp;code=AUTHORIZATION_CODE&amp;redirect_uri=REDIRECT_URI&amp;client_id=CLIENT_ID&amp;client_secret=CLIENT_SECRET\n</code></pre></li> </ul>"},{"location":"00_Springboot/04_security/00_OAuth_2.0/#implicit-grant","title":"<code>Implicit</code> Grant","text":"<ul> <li>A simplified flow where the Access Token is returned \"directly\" to the Client.</li> <li>use-case : SPA.</li> </ul>"},{"location":"00_Springboot/04_security/00_OAuth_2.0/#client-credential-grant","title":"<code>client-credential</code> Grant","text":"<ul> <li>First client acquire its own credentials(client id, client secret) from the Authorization Server,</li> <li>Access Token is returned against these credential. (basically AuthServer validate identity.)</li> <li>use-case : lambda, micro services.</li> <li>https://developer.okta.com/blog/2021/05/05/client-credentials-spring-security</li> <li>hands on:</li> <li>created app / client https://dev-16206041-admin.okta.com/admin/app/oidc_client/instance/0oaldbk7ys8px41Gy5d7/#tab-general</li> <li>created auth server: https://dev-16206041-admin.okta.com/admin/oauth2/as/ausldbxlfakbwq32P5d7#<ul> <li>add scope :  app_read_lekhraj</li> <li>add Access policy : allow above client</li> <li>DPoP : disable</li> <li>can add Trusted-servers</li> </ul> </li> <li>made postman call : https://lekhrajdinkar-postman-team.postman.co/workspace/My-Workspace~355328d1-2f75-4558-8e56-e229e284f6a3/example/5083106-53c3fa91-ef5f-4f49-899f-2b1064386242</li> <li>created GET http://localhost:8083/spring/security/getAccessToken to do same. <pre><code>    {\n  \"ver\": 1,\n  \"jti\": \"AT.-DVBDB63tr7t34AlwXR_y3zT_mHZWpGPWxholPDGLfI\",\n  \"iss\": \"https://dev-16206041.okta.com/oauth2/ausldbxlfakbwq32P5d7\",\n  \"aud\": \"0oaldbk7ys8px41Gy5d7\",\n  \"iat\": 1732406655,\n  \"exp\": 1732410255,\n  \"cid\": \"0oaldbk7ys8px41Gy5d7\",\n  \"scp\": [\n  \"app_read_lekhraj\"                         &lt;&lt;&lt;&lt;&lt;&lt;\n  ],\n  \"sub\": \"0oaldbk7ys8px41Gy5d7\"\n  }\n\ngot exception: \n  - org.springframework.security.oauth2.core.OAuth2AuthorizationException: [invalid_dpop_proof] The **DPoP proof JWT header is missing**. \n  - Demonstration of Proof of Possession\n  - provides an additional layer of security by requiring the client to prove possession of a private key associated.\n  - Disable it of Authorizarion-server \n</code></pre></li> </ul>"},{"location":"00_Springboot/04_security/00_OAuth_2.0/#refresh-token-grant","title":"<code>Refresh Token</code> Grant","text":"<ul> <li>involves the exchange of a Refresh Token for a new Access Token.</li> </ul>"},{"location":"00_Springboot/04_security/00_OAuth_2.0/#screenshots","title":"screenshots:","text":""},{"location":"00_Springboot/04_security/01_sb-security-start/","title":"Spring Boot Security Start","text":"<ul> <li>link1 - https://chatgpt.com/c/67417202-5748-800d-9fc5-c032961a7c5b </li> <li>client credential api call, DPoP error fix</li> <li>multiple filters</li> </ul>"},{"location":"00_Springboot/04_security/01_sb-security-start/#concepts","title":"concepts","text":"<ul> <li>OAuth2 dependency :: spring-boot-starter-oauth2-client + spring-security-oauth2-jose</li> <li>LDAP : https://chatgpt.com/c/5865254e-a777-416f-ad16-8e40df050c04 </li> <li>DN entries</li> <li>Authentication vs Authorization</li> <li>token - JWT https://jwt.io/introduction/</li> <li>web filter</li> <li>CCGG pattern/s</li> <li>App &lt;--&gt; Authenticating users against an LDAP directory, directly. (old)</li> <li>App &lt;--&gt; OKTA &lt;--integrated--&gt; LDAP Authentication<ul> <li>okta has user Authentication rule configured with LDAP</li> <li>okta has user access config. eg: which scope can ask. </li> <li>okta has MFA enabled</li> <li>one app/atmid, 1 scope, 1 client, 1 issuer, JWT-claims::scope [role1,role2,...]</li> <li>developer has grab role and use it method level access.</li> </ul> </li> <li>Using SAML for single sign-on (SSO) with external identity providers/Okta.</li> <li>security on the fly : TLS/SSL</li> </ul>"},{"location":"00_Springboot/04_security/01_sb-security-start/#spring-boot-security","title":"Spring Boot Security","text":""},{"location":"00_Springboot/04_security/01_sb-security-start/#intro","title":"Intro","text":"<ul> <li>Authentication and access-control framework.</li> <li>use web-filter bts</li> <li>old: WebSecurityConfigurerAdapter</li> <li><code>@EnableGlobalMethodSecurity</code>(prePostEnabled = true)` c1</li> <li><code>@PreAuthorize</code>(\"hasAuthority('SCOPE_my.spring.app.scope')\") m()</li> <li><code>Disable</code> auto-config<ul> <li>@SpringBootApplication(exclude = { SecurityAutoConfiguration.class })</li> <li>spring.autoconfigure.exclude = org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration</li> </ul> </li> <li><code>Enable</code> auto-config</li> <li>Add spring-boot-starter-security</li> <li>Add WebSecurityCustomizer <code>bean</code> <pre><code>  @Bean\n  public WebSecurityCustomizer webSecurityCustomizer() {\n      return (web) -&gt; web.ignoring().requestMatchers(\"/ignore1\", \"/ignore2\");\n  }\n</code></pre></li> <li>Add  SecurityFilterChain <code>bean</code> - <code>new and functional style</code>.<ul> <li>notice, injecting : HttpSecurity http</li> </ul> </li> </ul> <p><pre><code>@Configuration\n@EnableGlobalMethodSecurity`(prePostEnabled = true)\npublic class SecurityConfig \n{\n  @Bean\n  public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n      http\n          .authorizeRequests(authorize -&gt; authorize\n              .antMatchers(\"/path-read\").hasAuthority(\"SCOPE_ScopeRead\")    \n              .antMatchers(\"/path-write\").hasAuthority(\"SCOPE_ScopeWrite\") //.hasRole(\"\").hasAnyRole(\"\",\"\")\n              .anyRequest().authenticated()                         \n          )\n          .oauth2ResourceServer(oauth2 -&gt; oauth2\n              .jwt(Customizer.withDefaults()) // Validate JWT tokens\n          );\n      return http.build();\n  }\n }\n</code></pre>   - Security_01_Config.java     - webSecurityCustomizer-1 bean      - filter-1/2 bean - conditonally enable either.</p> <ul> <li>can have multiple filter beans. eg: </li> <li>filter-1 bean  @Order(1)  for url-pattern-1, do form-login</li> <li> <p>filter-2 bean  @Order(2)  for url-pattern-2, do Oauth-JWT-validation </p> <ul> <li>create more SecurityFilterChain and chain it on filter-2</li> <li>.addFilter(filter 3 bean)</li> <li>check reference link1 for code.</li> </ul> </li> <li> <p>claims (payload in JWT)     <pre><code>{\n\"sub\": \"1234567890\",\n\"name\": \"Lekhraj Dinkar\",\n\"roles\": [\"USER_ADMIN\"],                               &lt;&lt;&lt;\n\"scp\": [\"ScopeRead\", \"ScopeWrite\"],                    &lt;&lt;&lt;\n\"iat\": 1689704000,\n\"exp\": 1689707600\n}\n</code></pre></p> </li> <li>in SpEL, refer them like</li> <li>SCOPE_ ScopeRead</li> <li>ROLE_ USER_ADMIN</li> </ul>"},{"location":"00_Springboot/04_security/01_sb-security-start/#more-topic","title":"More topic","text":"<ul> <li>Cross-Origin Resource Sharing (CORS) settings</li> <li>Password Management safes: </li> <li>AWS-secret-manager </li> <li>CyberArk</li> <li>Prevent XSS and CSRF</li> <li>CSRF : enabled by default, </li> <li>create custom filter for further CSRF protection</li> </ul>"},{"location":"00_Springboot/04_security/02_Authentication/","title":"Authentication","text":""},{"location":"00_Springboot/04_security/02_Authentication/#key-term","title":"key term","text":"<ul> <li><code>UserDetail</code> (name,pass,role,etc),</li> <li><code>UserDetailsService</code></li> <li><code>Authentication</code></li> <li><code>AuthenticationManager</code> and <code>AuthenticationManagerBuilder</code></li> <li>central point for authentication logic</li> <li><code>AuthenticationProviders</code></li> <li>InMemoryUserDetailsManager : Security_01_Config.java</li> <li>Custom beans :  UserDetailsService AuthenticationProvider, Filters</li> </ul>"},{"location":"00_Springboot/04_security/02_Authentication/#ways-to-do","title":"ways to do","text":"<ol> <li><code>Form-based Authentication</code> (not for REST api) // http.loginForm()...</li> <li><code>Basic Authentication</code> / Digest Authentication (old,hashed credentials)<ul> <li>hide credential: Authorization header :: Base64-encoded string username:password.</li> <li>it\u2019s possible to hide the key using SSL.</li> </ul> </li> <li><code>LDAP</code> - springs helps to integrating with LDAP and perform authentication.</li> <li><code>OpenID Connect</code> </li> <li>springs helps to integrating with external authentication-providers(okta,google,etc)</li> <li>Identity token generate by Okta, requested by UI or consumer.</li> <li>okta:</li> <li>Multi-factor Authentication: configuring it</li> <li>SpringApp &lt;--&gt; okta &lt;--&gt; LDAP Integration, for Authentication</li> </ol>"},{"location":"00_Springboot/04_security/03_Authorization/","title":"Authorization","text":""},{"location":"00_Springboot/04_security/03_Authorization/#ways-to-do","title":"ways to do:","text":""},{"location":"00_Springboot/04_security/03_Authorization/#role-based-access-control-rbac","title":"<code>Role-based Access Control (RBAC)</code>","text":"<ul> <li>Assigning roles to users and granting access based on those roles.</li> <li>note: cg-LDAP takes care</li> </ul>"},{"location":"00_Springboot/04_security/03_Authorization/#url-based-security","title":"<code>URL-based Security</code>","text":"<ul> <li>Restricting access to web resources based on URL patterns.</li> </ul>"},{"location":"00_Springboot/04_security/03_Authorization/#token-based-oauth-20-green_circle","title":"token based : <code>OAuth 2.0</code> :green_circle:","text":"<ul> <li>springs helps to integrating with external authentication-providers(okta,google,etc)</li> <li>Access Token generate by Okta ; requested by UI.</li> <li><code>Spring &lt;--&gt; okta &lt;--&gt; LDAP Integration</code>, for Authorization</li> <li>parsing and validating JWT tokens.</li> </ul>"},{"location":"00_Springboot/04_security/03_Authorization/#method-level-security","title":"<code>Method-level Security</code>","text":"<ul> <li>https://www.baeldung.com/spring-security-method-security</li> <li>Anno:</li> <li>@PreAuthorize </li> <li>@PostAuthorize</li> <li>@Secured</li> <li>@RolesAllowed <pre><code>@RestController\npublic class LocationBasedAccessController \n{\n    @GetMapping(\"/restricted\")\n    @PreAuthorize(\"hasAuthority('ROLE_USER_ADMIN') and #jwt.claims['location'] == 'Irvine'\")   &lt;&lt;&lt;\n    public String restrictedAccess() {\n        return \"Access granted for users in Irvine!\";\n    }\n}\n\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"Lekhraj Dinkar\",\n  \"roles\": [\"USER_ADMIN\"],\n  \"location\": \"Irvine\",  // Custom claim\n  \"iat\": 1689704000,\n  \"exp\": 1689707600\n}\n</code></pre></li> </ul>"},{"location":"00_Springboot/04_security/04_REST-secure/","title":"REST Security","text":""},{"location":"00_Springboot/04_security/04_REST-secure/#secure-rest","title":"Secure REST","text":"<ul> <li>REST APIs are stateless, they should not use sessions or cookies, use JWT which is also Stateless.</li> <li>HTTPS: Securing data in transit using <code>SSL/TLS</code>.</li> <li>Security headers</li> <li><code>Strict-Transport-Security</code></li> <li><code>X-Content-Type-Options</code></li> <li><code>X-Frame-Options</code></li> <li><code>Content-Security-Policy</code> </li> </ul>"},{"location":"00_Springboot/04_security/04_REST-secure/#options","title":"Options","text":""},{"location":"00_Springboot/04_security/04_REST-secure/#1-basicdigest-authentication","title":"1. basic/digest Authentication","text":"<ul> <li>Security_01_Config.java</li> <li>AuthenticationEntryPoint - Configure it differently for basic and digest.</li> </ul>"},{"location":"00_Springboot/04_security/04_REST-secure/#2-api-keys","title":"2. API Keys","text":"<ul> <li>https://www.baeldung.com/spring-boot-api-key-secret</li> <li>Some REST APIs use API keys for authentication.</li> <li>An API-key is like <code>token</code>, that identifies the - <code>API-client to the API without referencing an actual user</code>.</li> <li>API-key can be sent in the queryString or header.</li> <li>it\u2019s possible to hide the key using SSL.</li> <li>Create <code>Custom Filter</code> to Check API-Check</li> <li>eg: CCGG MuleSoft API</li> </ul>"},{"location":"00_Springboot/04_security/04_REST-secure/#3-oauth-20-jwt-authorization-green_circle","title":"3. OAuth 2.0 JWT / Authorization :green_circle:","text":"<ul> <li>auth0 : https://manage.auth0.com/dashboard/us/dev-gpg8k3i38lkcqtkw/onboarding </li> <li>signed up with Github</li> <li>dev-gpg8k3i38lkcqtkw</li> <li>00_OAuth_2.0.md</li> </ul>"},{"location":"00_Springboot/04_security/04_REST-secure/#springboot-security-code","title":"Springboot security code","text":"<pre><code>spring.security.oauth2.resourceserver.jwt.issuer-uri=https://dev-16206041.okta.com/oauth2/ausldbxlfakbwq32P5d7\n\n---\n\n@ConditionalOnProperty(havingValue = \"SecurityFilterChain_03\", name = \"sb.customize.SecurityFilterChain\")\n@Bean\npublic SecurityFilterChain filterChainToken3(HttpSecurity http) throws Exception\n{\nhttp.authorizeHttpRequests(registry -&gt; registry\n.requestMatchers(\"/swagger-ui/**\", \"/actuators/**\").permitAll()\n.anyRequest()\n.authenticated());\nhttp.oauth2ResourceServer(oAuth2 -&gt; oAuth2.jwt(Customizer.withDefaults()));\nreturn http.build();\n}\n</code></pre>"}]}