#1 create pod without definition yaml / imperative command
- kubectl run pod-1 --image=image-1 -n=ns-1
- kubectl get svc ( or service )
- kubectl get all
- k get all
- k exec pod-1 < my-command >

#2.1 create/delete some pods
- kubectl create -f .\maps-outbound-pod.yml
- kubectl delete -f .\maps-outbound-pod.yml
- kubectl create -f .\maps-outbound-pod.yml

- kubectl get pods
NAME                READY   STATUS             RESTARTS   AGE
maps-outbound-pod   1/1     Running            0          3s

- kubectl get pod maps-outbound-pod -o yaml
- kubectl delete pod maps-outbound-pod

## 2.2 rs:
- kubectl get replicaset
- kubectl create -f <yaml>
- kubectl scale --replicas=6 -f replicaSet-definition.yaml
- kubectl scale --replicas=6 replicaset replicaset-1
- kubectl delete replicaset rs-1
    - all linked pods will be deleted.
-  kubectl get replicaset -o yaml > sample.yaml
- Note: use rs


#3 output option with get command
-o json Output a JSON formatted API object.
-o name Print only the resource name and nothing else.
-o wide Output in the plain-text format with any additional information.
-o yaml Output a YAML formatted API object.

#4 Namespace
- kubectl get pods --namespace=default
- kubectl create namespace dev
- kubectl config set-context $(kubectl config current-context) --namespace=dev
- kubectl get pods --all-namespaces  ( or just -A )
- use while create/delete/replace

#5 Don’t create it(–dry-run) and -o yaml
- kubectl run nginx --image=nginx --dry-run=client -o yaml > abc.yaml
- kubectl create deployment --image=nginx deployment-1  --replicas=4 --dry-run -o yaml
- kubectl expose pod redis --port=6379 --name redis-service --type=NodePort --dry-run=client -o yaml
- kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml

#6 imperative + declarative/yaml
- kubectl run redis --image=redis:alpine --dry-run=client -o yaml > redis-pod-def.yaml
- kubectl expose pod redis --name=redis-service --port=6379 --type=clusterip
- kubectl create deployment webapp --replicas=2 --image=kodekloud/webapp-color
- kubectl scale deployment webapp --replicas=3
- kubectl create ns dev-ns
- kubectl create deployment redis-deploy --replicas=2 --image=redis --namespace=dev-ns
- kubectl run httpd --image=httpd:alpine --namespace=default
- kubectl expose pod httpd --type=ClusterIP --name=httpd --port=80 --namespace=default

# edit non-editable feild in pod
-  kubectl edit pod ubuntu-sleeper-3
- this open yaml in vi
- save, this saved below tmp copy
- kubectl delete pod ubuntu-sleeper-3
- kubectl create -f /tmp/kubectl-edit-1598052637.yaml

# pass arg/cmd
- kubectl run pod-1 image=image-1 -- --arg1 value --arg2 value2
- arg1/2 are argumnet to kubectl
- they arg to container running

# configmap and env
- kubectl get configmaps
- kubectl describe configmap db-config
- kubectl create configmap webapp-config-map --from-literal=APP_COLOR=darkblue --from-literal=APP_OTHER=diregard

# secrets
kubectl create secret generic db-secret \
  --from-literal=DB_Host=sql01 \
  --from-literal=DB_User=root \
  --from-literal=DB_Password=password123

# Service Account
-  k get pod web-dashboard-6cbbc88b59-96zjk -o yaml
-  found :
    - serviceAccountName: default
    - volumeMounts > mountpath : /var/run/secrets/kubernetes.io/serviceaccount
    - k exec web-dashboard-6cbbc88b59-96zjk -- cat /var/run/secrets/kubernetes.io/serviceaccount/token
    - default sa has not enough permission.
- create new account
    - k create serviceaccount dashboard-sa
    - permission added , using RBAC
    -  k create token dashboard-sa
    - use this token

